/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yihu.ehr.std;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-15")
public class TMetaData implements org.apache.thrift.TBase<TMetaData, TMetaData._Fields>, java.io.Serializable, Cloneable, Comparable<TMetaData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMetaData");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INNER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("innerCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("deCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_SET_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSetCode", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMetaDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMetaDataTupleSchemeFactory());
  }

  public String id; // required
  public String innerCode; // required
  public String deCode; // required
  public String dataSetCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    INNER_CODE((short)2, "innerCode"),
    DE_CODE((short)3, "deCode"),
    DATA_SET_CODE((short)4, "dataSetCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // INNER_CODE
          return INNER_CODE;
        case 3: // DE_CODE
          return DE_CODE;
        case 4: // DATA_SET_CODE
          return DATA_SET_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INNER_CODE, new org.apache.thrift.meta_data.FieldMetaData("innerCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DE_CODE, new org.apache.thrift.meta_data.FieldMetaData("deCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_SET_CODE, new org.apache.thrift.meta_data.FieldMetaData("dataSetCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMetaData.class, metaDataMap);
  }

  public TMetaData() {
  }

  public TMetaData(
    String id,
    String innerCode,
    String deCode,
    String dataSetCode)
  {
    this();
    this.id = id;
    this.innerCode = innerCode;
    this.deCode = deCode;
    this.dataSetCode = dataSetCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMetaData(TMetaData other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetInnerCode()) {
      this.innerCode = other.innerCode;
    }
    if (other.isSetDeCode()) {
      this.deCode = other.deCode;
    }
    if (other.isSetDataSetCode()) {
      this.dataSetCode = other.dataSetCode;
    }
  }

  public TMetaData deepCopy() {
    return new TMetaData(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.innerCode = null;
    this.deCode = null;
    this.dataSetCode = null;
  }

  public String getId() {
    return this.id;
  }

  public TMetaData setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getInnerCode() {
    return this.innerCode;
  }

  public TMetaData setInnerCode(String innerCode) {
    this.innerCode = innerCode;
    return this;
  }

  public void unsetInnerCode() {
    this.innerCode = null;
  }

  /** Returns true if field innerCode is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerCode() {
    return this.innerCode != null;
  }

  public void setInnerCodeIsSet(boolean value) {
    if (!value) {
      this.innerCode = null;
    }
  }

  public String getDeCode() {
    return this.deCode;
  }

  public TMetaData setDeCode(String deCode) {
    this.deCode = deCode;
    return this;
  }

  public void unsetDeCode() {
    this.deCode = null;
  }

  /** Returns true if field deCode is set (has been assigned a value) and false otherwise */
  public boolean isSetDeCode() {
    return this.deCode != null;
  }

  public void setDeCodeIsSet(boolean value) {
    if (!value) {
      this.deCode = null;
    }
  }

  public String getDataSetCode() {
    return this.dataSetCode;
  }

  public TMetaData setDataSetCode(String dataSetCode) {
    this.dataSetCode = dataSetCode;
    return this;
  }

  public void unsetDataSetCode() {
    this.dataSetCode = null;
  }

  /** Returns true if field dataSetCode is set (has been assigned a value) and false otherwise */
  public boolean isSetDataSetCode() {
    return this.dataSetCode != null;
  }

  public void setDataSetCodeIsSet(boolean value) {
    if (!value) {
      this.dataSetCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case INNER_CODE:
      if (value == null) {
        unsetInnerCode();
      } else {
        setInnerCode((String)value);
      }
      break;

    case DE_CODE:
      if (value == null) {
        unsetDeCode();
      } else {
        setDeCode((String)value);
      }
      break;

    case DATA_SET_CODE:
      if (value == null) {
        unsetDataSetCode();
      } else {
        setDataSetCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case INNER_CODE:
      return getInnerCode();

    case DE_CODE:
      return getDeCode();

    case DATA_SET_CODE:
      return getDataSetCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case INNER_CODE:
      return isSetInnerCode();
    case DE_CODE:
      return isSetDeCode();
    case DATA_SET_CODE:
      return isSetDataSetCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMetaData)
      return this.equals((TMetaData)that);
    return false;
  }

  public boolean equals(TMetaData that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_innerCode = true && this.isSetInnerCode();
    boolean that_present_innerCode = true && that.isSetInnerCode();
    if (this_present_innerCode || that_present_innerCode) {
      if (!(this_present_innerCode && that_present_innerCode))
        return false;
      if (!this.innerCode.equals(that.innerCode))
        return false;
    }

    boolean this_present_deCode = true && this.isSetDeCode();
    boolean that_present_deCode = true && that.isSetDeCode();
    if (this_present_deCode || that_present_deCode) {
      if (!(this_present_deCode && that_present_deCode))
        return false;
      if (!this.deCode.equals(that.deCode))
        return false;
    }

    boolean this_present_dataSetCode = true && this.isSetDataSetCode();
    boolean that_present_dataSetCode = true && that.isSetDataSetCode();
    if (this_present_dataSetCode || that_present_dataSetCode) {
      if (!(this_present_dataSetCode && that_present_dataSetCode))
        return false;
      if (!this.dataSetCode.equals(that.dataSetCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_innerCode = true && (isSetInnerCode());
    list.add(present_innerCode);
    if (present_innerCode)
      list.add(innerCode);

    boolean present_deCode = true && (isSetDeCode());
    list.add(present_deCode);
    if (present_deCode)
      list.add(deCode);

    boolean present_dataSetCode = true && (isSetDataSetCode());
    list.add(present_dataSetCode);
    if (present_dataSetCode)
      list.add(dataSetCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMetaData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerCode()).compareTo(other.isSetInnerCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerCode, other.innerCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeCode()).compareTo(other.isSetDeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deCode, other.deCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataSetCode()).compareTo(other.isSetDataSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSetCode, other.dataSetCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMetaData(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("innerCode:");
    if (this.innerCode == null) {
      sb.append("null");
    } else {
      sb.append(this.innerCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deCode:");
    if (this.deCode == null) {
      sb.append("null");
    } else {
      sb.append(this.deCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataSetCode:");
    if (this.dataSetCode == null) {
      sb.append("null");
    } else {
      sb.append(this.dataSetCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (innerCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'innerCode' was not present! Struct: " + toString());
    }
    if (deCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deCode' was not present! Struct: " + toString());
    }
    if (dataSetCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataSetCode' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMetaDataStandardSchemeFactory implements SchemeFactory {
    public TMetaDataStandardScheme getScheme() {
      return new TMetaDataStandardScheme();
    }
  }

  private static class TMetaDataStandardScheme extends StandardScheme<TMetaData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INNER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.innerCode = iprot.readString();
              struct.setInnerCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deCode = iprot.readString();
              struct.setDeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA_SET_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataSetCode = iprot.readString();
              struct.setDataSetCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMetaData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.innerCode != null) {
        oprot.writeFieldBegin(INNER_CODE_FIELD_DESC);
        oprot.writeString(struct.innerCode);
        oprot.writeFieldEnd();
      }
      if (struct.deCode != null) {
        oprot.writeFieldBegin(DE_CODE_FIELD_DESC);
        oprot.writeString(struct.deCode);
        oprot.writeFieldEnd();
      }
      if (struct.dataSetCode != null) {
        oprot.writeFieldBegin(DATA_SET_CODE_FIELD_DESC);
        oprot.writeString(struct.dataSetCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMetaDataTupleSchemeFactory implements SchemeFactory {
    public TMetaDataTupleScheme getScheme() {
      return new TMetaDataTupleScheme();
    }
  }

  private static class TMetaDataTupleScheme extends TupleScheme<TMetaData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMetaData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.innerCode);
      oprot.writeString(struct.deCode);
      oprot.writeString(struct.dataSetCode);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMetaData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.innerCode = iprot.readString();
      struct.setInnerCodeIsSet(true);
      struct.deCode = iprot.readString();
      struct.setDeCodeIsSet(true);
      struct.dataSetCode = iprot.readString();
      struct.setDataSetCodeIsSet(true);
    }
  }

}

