/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yihu.ehr.patient.family;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-15")
public class TMember implements org.apache.thrift.TBase<TMember, TMember._Fields>, java.io.Serializable, Cloneable, Comparable<TMember> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMember");

  private static final org.apache.thrift.protocol.TField DEMOGRAPHIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("demographicId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("familyId", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMemberStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMemberTupleSchemeFactory());
  }

  public String demographicId; // required
  public String familyId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEMOGRAPHIC_ID((short)1, "demographicId"),
    FAMILY_ID((short)2, "familyId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEMOGRAPHIC_ID
          return DEMOGRAPHIC_ID;
        case 2: // FAMILY_ID
          return FAMILY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEMOGRAPHIC_ID, new org.apache.thrift.meta_data.FieldMetaData("demographicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("familyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMember.class, metaDataMap);
  }

  public TMember() {
  }

  public TMember(
    String demographicId,
    String familyId)
  {
    this();
    this.demographicId = demographicId;
    this.familyId = familyId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMember(TMember other) {
    if (other.isSetDemographicId()) {
      this.demographicId = other.demographicId;
    }
    if (other.isSetFamilyId()) {
      this.familyId = other.familyId;
    }
  }

  public TMember deepCopy() {
    return new TMember(this);
  }

  @Override
  public void clear() {
    this.demographicId = null;
    this.familyId = null;
  }

  public String getDemographicId() {
    return this.demographicId;
  }

  public TMember setDemographicId(String demographicId) {
    this.demographicId = demographicId;
    return this;
  }

  public void unsetDemographicId() {
    this.demographicId = null;
  }

  /** Returns true if field demographicId is set (has been assigned a value) and false otherwise */
  public boolean isSetDemographicId() {
    return this.demographicId != null;
  }

  public void setDemographicIdIsSet(boolean value) {
    if (!value) {
      this.demographicId = null;
    }
  }

  public String getFamilyId() {
    return this.familyId;
  }

  public TMember setFamilyId(String familyId) {
    this.familyId = familyId;
    return this;
  }

  public void unsetFamilyId() {
    this.familyId = null;
  }

  /** Returns true if field familyId is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyId() {
    return this.familyId != null;
  }

  public void setFamilyIdIsSet(boolean value) {
    if (!value) {
      this.familyId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEMOGRAPHIC_ID:
      if (value == null) {
        unsetDemographicId();
      } else {
        setDemographicId((String)value);
      }
      break;

    case FAMILY_ID:
      if (value == null) {
        unsetFamilyId();
      } else {
        setFamilyId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEMOGRAPHIC_ID:
      return getDemographicId();

    case FAMILY_ID:
      return getFamilyId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEMOGRAPHIC_ID:
      return isSetDemographicId();
    case FAMILY_ID:
      return isSetFamilyId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMember)
      return this.equals((TMember)that);
    return false;
  }

  public boolean equals(TMember that) {
    if (that == null)
      return false;

    boolean this_present_demographicId = true && this.isSetDemographicId();
    boolean that_present_demographicId = true && that.isSetDemographicId();
    if (this_present_demographicId || that_present_demographicId) {
      if (!(this_present_demographicId && that_present_demographicId))
        return false;
      if (!this.demographicId.equals(that.demographicId))
        return false;
    }

    boolean this_present_familyId = true && this.isSetFamilyId();
    boolean that_present_familyId = true && that.isSetFamilyId();
    if (this_present_familyId || that_present_familyId) {
      if (!(this_present_familyId && that_present_familyId))
        return false;
      if (!this.familyId.equals(that.familyId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_demographicId = true && (isSetDemographicId());
    list.add(present_demographicId);
    if (present_demographicId)
      list.add(demographicId);

    boolean present_familyId = true && (isSetFamilyId());
    list.add(present_familyId);
    if (present_familyId)
      list.add(familyId);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMember other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDemographicId()).compareTo(other.isSetDemographicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDemographicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.demographicId, other.demographicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyId()).compareTo(other.isSetFamilyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyId, other.familyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMember(");
    boolean first = true;

    sb.append("demographicId:");
    if (this.demographicId == null) {
      sb.append("null");
    } else {
      sb.append(this.demographicId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyId:");
    if (this.familyId == null) {
      sb.append("null");
    } else {
      sb.append(this.familyId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMemberStandardSchemeFactory implements SchemeFactory {
    public TMemberStandardScheme getScheme() {
      return new TMemberStandardScheme();
    }
  }

  private static class TMemberStandardScheme extends StandardScheme<TMember> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMember struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEMOGRAPHIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.demographicId = iprot.readString();
              struct.setDemographicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAMILY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.familyId = iprot.readString();
              struct.setFamilyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMember struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.demographicId != null) {
        oprot.writeFieldBegin(DEMOGRAPHIC_ID_FIELD_DESC);
        oprot.writeString(struct.demographicId);
        oprot.writeFieldEnd();
      }
      if (struct.familyId != null) {
        oprot.writeFieldBegin(FAMILY_ID_FIELD_DESC);
        oprot.writeString(struct.familyId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMemberTupleSchemeFactory implements SchemeFactory {
    public TMemberTupleScheme getScheme() {
      return new TMemberTupleScheme();
    }
  }

  private static class TMemberTupleScheme extends TupleScheme<TMember> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMember struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDemographicId()) {
        optionals.set(0);
      }
      if (struct.isSetFamilyId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDemographicId()) {
        oprot.writeString(struct.demographicId);
      }
      if (struct.isSetFamilyId()) {
        oprot.writeString(struct.familyId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMember struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.demographicId = iprot.readString();
        struct.setDemographicIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.familyId = iprot.readString();
        struct.setFamilyIdIsSet(true);
      }
    }
  }

}

