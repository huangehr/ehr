/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yihu.ehr.patient.card;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-15")
public class TCard implements org.apache.thrift.TBase<TCard, TCard._Fields>, java.io.Serializable, Cloneable, Comparable<TCard> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCard");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SOCIAL_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("socialAccount", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCardStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCardTupleSchemeFactory());
  }

  public String id; // required
  /**
   * 
   * @see CardType
   */
  public CardType cardType; // required
  public String socialAccount; // optional
  public String cardNo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see CardType
     */
    CARD_TYPE((short)2, "cardType"),
    SOCIAL_ACCOUNT((short)3, "socialAccount"),
    CARD_NO((short)4, "cardNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CARD_TYPE
          return CARD_TYPE;
        case 3: // SOCIAL_ACCOUNT
          return SOCIAL_ACCOUNT;
        case 4: // CARD_NO
          return CARD_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SOCIAL_ACCOUNT,_Fields.CARD_NO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CardType.class)));
    tmpMap.put(_Fields.SOCIAL_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("socialAccount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCard.class, metaDataMap);
  }

  public TCard() {
  }

  public TCard(
    String id,
    CardType cardType)
  {
    this();
    this.id = id;
    this.cardType = cardType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCard(TCard other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCardType()) {
      this.cardType = other.cardType;
    }
    if (other.isSetSocialAccount()) {
      this.socialAccount = other.socialAccount;
    }
    if (other.isSetCardNo()) {
      this.cardNo = other.cardNo;
    }
  }

  public TCard deepCopy() {
    return new TCard(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.cardType = null;
    this.socialAccount = null;
    this.cardNo = null;
  }

  public String getId() {
    return this.id;
  }

  public TCard setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 
   * @see CardType
   */
  public CardType getCardType() {
    return this.cardType;
  }

  /**
   * 
   * @see CardType
   */
  public TCard setCardType(CardType cardType) {
    this.cardType = cardType;
    return this;
  }

  public void unsetCardType() {
    this.cardType = null;
  }

  /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
  public boolean isSetCardType() {
    return this.cardType != null;
  }

  public void setCardTypeIsSet(boolean value) {
    if (!value) {
      this.cardType = null;
    }
  }

  public String getSocialAccount() {
    return this.socialAccount;
  }

  public TCard setSocialAccount(String socialAccount) {
    this.socialAccount = socialAccount;
    return this;
  }

  public void unsetSocialAccount() {
    this.socialAccount = null;
  }

  /** Returns true if field socialAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetSocialAccount() {
    return this.socialAccount != null;
  }

  public void setSocialAccountIsSet(boolean value) {
    if (!value) {
      this.socialAccount = null;
    }
  }

  public String getCardNo() {
    return this.cardNo;
  }

  public TCard setCardNo(String cardNo) {
    this.cardNo = cardNo;
    return this;
  }

  public void unsetCardNo() {
    this.cardNo = null;
  }

  /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCardNo() {
    return this.cardNo != null;
  }

  public void setCardNoIsSet(boolean value) {
    if (!value) {
      this.cardNo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CARD_TYPE:
      if (value == null) {
        unsetCardType();
      } else {
        setCardType((CardType)value);
      }
      break;

    case SOCIAL_ACCOUNT:
      if (value == null) {
        unsetSocialAccount();
      } else {
        setSocialAccount((String)value);
      }
      break;

    case CARD_NO:
      if (value == null) {
        unsetCardNo();
      } else {
        setCardNo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CARD_TYPE:
      return getCardType();

    case SOCIAL_ACCOUNT:
      return getSocialAccount();

    case CARD_NO:
      return getCardNo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CARD_TYPE:
      return isSetCardType();
    case SOCIAL_ACCOUNT:
      return isSetSocialAccount();
    case CARD_NO:
      return isSetCardNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCard)
      return this.equals((TCard)that);
    return false;
  }

  public boolean equals(TCard that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_cardType = true && this.isSetCardType();
    boolean that_present_cardType = true && that.isSetCardType();
    if (this_present_cardType || that_present_cardType) {
      if (!(this_present_cardType && that_present_cardType))
        return false;
      if (!this.cardType.equals(that.cardType))
        return false;
    }

    boolean this_present_socialAccount = true && this.isSetSocialAccount();
    boolean that_present_socialAccount = true && that.isSetSocialAccount();
    if (this_present_socialAccount || that_present_socialAccount) {
      if (!(this_present_socialAccount && that_present_socialAccount))
        return false;
      if (!this.socialAccount.equals(that.socialAccount))
        return false;
    }

    boolean this_present_cardNo = true && this.isSetCardNo();
    boolean that_present_cardNo = true && that.isSetCardNo();
    if (this_present_cardNo || that_present_cardNo) {
      if (!(this_present_cardNo && that_present_cardNo))
        return false;
      if (!this.cardNo.equals(that.cardNo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_cardType = true && (isSetCardType());
    list.add(present_cardType);
    if (present_cardType)
      list.add(cardType.getValue());

    boolean present_socialAccount = true && (isSetSocialAccount());
    list.add(present_socialAccount);
    if (present_socialAccount)
      list.add(socialAccount);

    boolean present_cardNo = true && (isSetCardNo());
    list.add(present_cardNo);
    if (present_cardNo)
      list.add(cardNo);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCard other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardType()).compareTo(other.isSetCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, other.cardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSocialAccount()).compareTo(other.isSetSocialAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSocialAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialAccount, other.socialAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCard(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardType:");
    if (this.cardType == null) {
      sb.append("null");
    } else {
      sb.append(this.cardType);
    }
    first = false;
    if (isSetSocialAccount()) {
      if (!first) sb.append(", ");
      sb.append("socialAccount:");
      if (this.socialAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.socialAccount);
      }
      first = false;
    }
    if (isSetCardNo()) {
      if (!first) sb.append(", ");
      sb.append("cardNo:");
      if (this.cardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.cardNo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (cardType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cardType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCardStandardSchemeFactory implements SchemeFactory {
    public TCardStandardScheme getScheme() {
      return new TCardStandardScheme();
    }
  }

  private static class TCardStandardScheme extends StandardScheme<TCard> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCard struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cardType = com.yihu.ehr.patient.card.CardType.findByValue(iprot.readI32());
              struct.setCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SOCIAL_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.socialAccount = iprot.readString();
              struct.setSocialAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardNo = iprot.readString();
              struct.setCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCard struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.cardType != null) {
        oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.cardType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.socialAccount != null) {
        if (struct.isSetSocialAccount()) {
          oprot.writeFieldBegin(SOCIAL_ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.socialAccount);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cardNo != null) {
        if (struct.isSetCardNo()) {
          oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
          oprot.writeString(struct.cardNo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCardTupleSchemeFactory implements SchemeFactory {
    public TCardTupleScheme getScheme() {
      return new TCardTupleScheme();
    }
  }

  private static class TCardTupleScheme extends TupleScheme<TCard> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCard struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeI32(struct.cardType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetSocialAccount()) {
        optionals.set(0);
      }
      if (struct.isSetCardNo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSocialAccount()) {
        oprot.writeString(struct.socialAccount);
      }
      if (struct.isSetCardNo()) {
        oprot.writeString(struct.cardNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCard struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.cardType = com.yihu.ehr.patient.card.CardType.findByValue(iprot.readI32());
      struct.setCardTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.socialAccount = iprot.readString();
        struct.setSocialAccountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cardNo = iprot.readString();
        struct.setCardNoIsSet(true);
      }
    }
  }

}

