/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yihu.ehr.resolve;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-15")
public class TResolveService {

  public interface Iface {

    public void startResovlveScheduler(String cronExpression) throws org.apache.thrift.TException;

    public void pauseResolveScheduler(boolean waitForCompleted) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void startResovlveScheduler(String cronExpression, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pauseResolveScheduler(boolean waitForCompleted, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void startResovlveScheduler(String cronExpression) throws org.apache.thrift.TException
    {
      send_startResovlveScheduler(cronExpression);
      recv_startResovlveScheduler();
    }

    public void send_startResovlveScheduler(String cronExpression) throws org.apache.thrift.TException
    {
      startResovlveScheduler_args args = new startResovlveScheduler_args();
      args.setCronExpression(cronExpression);
      sendBase("startResovlveScheduler", args);
    }

    public void recv_startResovlveScheduler() throws org.apache.thrift.TException
    {
      startResovlveScheduler_result result = new startResovlveScheduler_result();
      receiveBase(result, "startResovlveScheduler");
      return;
    }

    public void pauseResolveScheduler(boolean waitForCompleted) throws org.apache.thrift.TException
    {
      send_pauseResolveScheduler(waitForCompleted);
      recv_pauseResolveScheduler();
    }

    public void send_pauseResolveScheduler(boolean waitForCompleted) throws org.apache.thrift.TException
    {
      pauseResolveScheduler_args args = new pauseResolveScheduler_args();
      args.setWaitForCompleted(waitForCompleted);
      sendBase("pauseResolveScheduler", args);
    }

    public void recv_pauseResolveScheduler() throws org.apache.thrift.TException
    {
      pauseResolveScheduler_result result = new pauseResolveScheduler_result();
      receiveBase(result, "pauseResolveScheduler");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void startResovlveScheduler(String cronExpression, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startResovlveScheduler_call method_call = new startResovlveScheduler_call(cronExpression, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startResovlveScheduler_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cronExpression;
      public startResovlveScheduler_call(String cronExpression, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cronExpression = cronExpression;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startResovlveScheduler", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startResovlveScheduler_args args = new startResovlveScheduler_args();
        args.setCronExpression(cronExpression);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_startResovlveScheduler();
      }
    }

    public void pauseResolveScheduler(boolean waitForCompleted, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pauseResolveScheduler_call method_call = new pauseResolveScheduler_call(waitForCompleted, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pauseResolveScheduler_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean waitForCompleted;
      public pauseResolveScheduler_call(boolean waitForCompleted, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.waitForCompleted = waitForCompleted;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pauseResolveScheduler", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pauseResolveScheduler_args args = new pauseResolveScheduler_args();
        args.setWaitForCompleted(waitForCompleted);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_pauseResolveScheduler();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("startResovlveScheduler", new startResovlveScheduler());
      processMap.put("pauseResolveScheduler", new pauseResolveScheduler());
      return processMap;
    }

    public static class startResovlveScheduler<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startResovlveScheduler_args> {
      public startResovlveScheduler() {
        super("startResovlveScheduler");
      }

      public startResovlveScheduler_args getEmptyArgsInstance() {
        return new startResovlveScheduler_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startResovlveScheduler_result getResult(I iface, startResovlveScheduler_args args) throws org.apache.thrift.TException {
        startResovlveScheduler_result result = new startResovlveScheduler_result();
        iface.startResovlveScheduler(args.cronExpression);
        return result;
      }
    }

    public static class pauseResolveScheduler<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pauseResolveScheduler_args> {
      public pauseResolveScheduler() {
        super("pauseResolveScheduler");
      }

      public pauseResolveScheduler_args getEmptyArgsInstance() {
        return new pauseResolveScheduler_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pauseResolveScheduler_result getResult(I iface, pauseResolveScheduler_args args) throws org.apache.thrift.TException {
        pauseResolveScheduler_result result = new pauseResolveScheduler_result();
        iface.pauseResolveScheduler(args.waitForCompleted);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("startResovlveScheduler", new startResovlveScheduler());
      processMap.put("pauseResolveScheduler", new pauseResolveScheduler());
      return processMap;
    }

    public static class startResovlveScheduler<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startResovlveScheduler_args, Void> {
      public startResovlveScheduler() {
        super("startResovlveScheduler");
      }

      public startResovlveScheduler_args getEmptyArgsInstance() {
        return new startResovlveScheduler_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            startResovlveScheduler_result result = new startResovlveScheduler_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            startResovlveScheduler_result result = new startResovlveScheduler_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startResovlveScheduler_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.startResovlveScheduler(args.cronExpression,resultHandler);
      }
    }

    public static class pauseResolveScheduler<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pauseResolveScheduler_args, Void> {
      public pauseResolveScheduler() {
        super("pauseResolveScheduler");
      }

      public pauseResolveScheduler_args getEmptyArgsInstance() {
        return new pauseResolveScheduler_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            pauseResolveScheduler_result result = new pauseResolveScheduler_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pauseResolveScheduler_result result = new pauseResolveScheduler_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pauseResolveScheduler_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.pauseResolveScheduler(args.waitForCompleted,resultHandler);
      }
    }

  }

  public static class startResovlveScheduler_args implements org.apache.thrift.TBase<startResovlveScheduler_args, startResovlveScheduler_args._Fields>, java.io.Serializable, Cloneable, Comparable<startResovlveScheduler_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startResovlveScheduler_args");

    private static final org.apache.thrift.protocol.TField CRON_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("cronExpression", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startResovlveScheduler_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startResovlveScheduler_argsTupleSchemeFactory());
    }

    public String cronExpression; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRON_EXPRESSION((short)1, "cronExpression");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRON_EXPRESSION
            return CRON_EXPRESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRON_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("cronExpression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startResovlveScheduler_args.class, metaDataMap);
    }

    public startResovlveScheduler_args() {
    }

    public startResovlveScheduler_args(
      String cronExpression)
    {
      this();
      this.cronExpression = cronExpression;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startResovlveScheduler_args(startResovlveScheduler_args other) {
      if (other.isSetCronExpression()) {
        this.cronExpression = other.cronExpression;
      }
    }

    public startResovlveScheduler_args deepCopy() {
      return new startResovlveScheduler_args(this);
    }

    @Override
    public void clear() {
      this.cronExpression = null;
    }

    public String getCronExpression() {
      return this.cronExpression;
    }

    public startResovlveScheduler_args setCronExpression(String cronExpression) {
      this.cronExpression = cronExpression;
      return this;
    }

    public void unsetCronExpression() {
      this.cronExpression = null;
    }

    /** Returns true if field cronExpression is set (has been assigned a value) and false otherwise */
    public boolean isSetCronExpression() {
      return this.cronExpression != null;
    }

    public void setCronExpressionIsSet(boolean value) {
      if (!value) {
        this.cronExpression = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRON_EXPRESSION:
        if (value == null) {
          unsetCronExpression();
        } else {
          setCronExpression((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRON_EXPRESSION:
        return getCronExpression();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRON_EXPRESSION:
        return isSetCronExpression();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startResovlveScheduler_args)
        return this.equals((startResovlveScheduler_args)that);
      return false;
    }

    public boolean equals(startResovlveScheduler_args that) {
      if (that == null)
        return false;

      boolean this_present_cronExpression = true && this.isSetCronExpression();
      boolean that_present_cronExpression = true && that.isSetCronExpression();
      if (this_present_cronExpression || that_present_cronExpression) {
        if (!(this_present_cronExpression && that_present_cronExpression))
          return false;
        if (!this.cronExpression.equals(that.cronExpression))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cronExpression = true && (isSetCronExpression());
      list.add(present_cronExpression);
      if (present_cronExpression)
        list.add(cronExpression);

      return list.hashCode();
    }

    @Override
    public int compareTo(startResovlveScheduler_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCronExpression()).compareTo(other.isSetCronExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCronExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cronExpression, other.cronExpression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startResovlveScheduler_args(");
      boolean first = true;

      sb.append("cronExpression:");
      if (this.cronExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.cronExpression);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startResovlveScheduler_argsStandardSchemeFactory implements SchemeFactory {
      public startResovlveScheduler_argsStandardScheme getScheme() {
        return new startResovlveScheduler_argsStandardScheme();
      }
    }

    private static class startResovlveScheduler_argsStandardScheme extends StandardScheme<startResovlveScheduler_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startResovlveScheduler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRON_EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cronExpression = iprot.readString();
                struct.setCronExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startResovlveScheduler_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cronExpression != null) {
          oprot.writeFieldBegin(CRON_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.cronExpression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startResovlveScheduler_argsTupleSchemeFactory implements SchemeFactory {
      public startResovlveScheduler_argsTupleScheme getScheme() {
        return new startResovlveScheduler_argsTupleScheme();
      }
    }

    private static class startResovlveScheduler_argsTupleScheme extends TupleScheme<startResovlveScheduler_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startResovlveScheduler_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCronExpression()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCronExpression()) {
          oprot.writeString(struct.cronExpression);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startResovlveScheduler_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cronExpression = iprot.readString();
          struct.setCronExpressionIsSet(true);
        }
      }
    }

  }

  public static class startResovlveScheduler_result implements org.apache.thrift.TBase<startResovlveScheduler_result, startResovlveScheduler_result._Fields>, java.io.Serializable, Cloneable, Comparable<startResovlveScheduler_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startResovlveScheduler_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startResovlveScheduler_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startResovlveScheduler_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startResovlveScheduler_result.class, metaDataMap);
    }

    public startResovlveScheduler_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startResovlveScheduler_result(startResovlveScheduler_result other) {
    }

    public startResovlveScheduler_result deepCopy() {
      return new startResovlveScheduler_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startResovlveScheduler_result)
        return this.equals((startResovlveScheduler_result)that);
      return false;
    }

    public boolean equals(startResovlveScheduler_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(startResovlveScheduler_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startResovlveScheduler_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startResovlveScheduler_resultStandardSchemeFactory implements SchemeFactory {
      public startResovlveScheduler_resultStandardScheme getScheme() {
        return new startResovlveScheduler_resultStandardScheme();
      }
    }

    private static class startResovlveScheduler_resultStandardScheme extends StandardScheme<startResovlveScheduler_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startResovlveScheduler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startResovlveScheduler_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startResovlveScheduler_resultTupleSchemeFactory implements SchemeFactory {
      public startResovlveScheduler_resultTupleScheme getScheme() {
        return new startResovlveScheduler_resultTupleScheme();
      }
    }

    private static class startResovlveScheduler_resultTupleScheme extends TupleScheme<startResovlveScheduler_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startResovlveScheduler_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startResovlveScheduler_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class pauseResolveScheduler_args implements org.apache.thrift.TBase<pauseResolveScheduler_args, pauseResolveScheduler_args._Fields>, java.io.Serializable, Cloneable, Comparable<pauseResolveScheduler_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pauseResolveScheduler_args");

    private static final org.apache.thrift.protocol.TField WAIT_FOR_COMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("waitForCompleted", org.apache.thrift.protocol.TType.BOOL, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pauseResolveScheduler_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pauseResolveScheduler_argsTupleSchemeFactory());
    }

    public boolean waitForCompleted; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WAIT_FOR_COMPLETED((short)-1, "waitForCompleted");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // WAIT_FOR_COMPLETED
            return WAIT_FOR_COMPLETED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WAITFORCOMPLETED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WAIT_FOR_COMPLETED, new org.apache.thrift.meta_data.FieldMetaData("waitForCompleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pauseResolveScheduler_args.class, metaDataMap);
    }

    public pauseResolveScheduler_args() {
    }

    public pauseResolveScheduler_args(
      boolean waitForCompleted)
    {
      this();
      this.waitForCompleted = waitForCompleted;
      setWaitForCompletedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pauseResolveScheduler_args(pauseResolveScheduler_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.waitForCompleted = other.waitForCompleted;
    }

    public pauseResolveScheduler_args deepCopy() {
      return new pauseResolveScheduler_args(this);
    }

    @Override
    public void clear() {
      setWaitForCompletedIsSet(false);
      this.waitForCompleted = false;
    }

    public boolean isWaitForCompleted() {
      return this.waitForCompleted;
    }

    public pauseResolveScheduler_args setWaitForCompleted(boolean waitForCompleted) {
      this.waitForCompleted = waitForCompleted;
      setWaitForCompletedIsSet(true);
      return this;
    }

    public void unsetWaitForCompleted() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAITFORCOMPLETED_ISSET_ID);
    }

    /** Returns true if field waitForCompleted is set (has been assigned a value) and false otherwise */
    public boolean isSetWaitForCompleted() {
      return EncodingUtils.testBit(__isset_bitfield, __WAITFORCOMPLETED_ISSET_ID);
    }

    public void setWaitForCompletedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAITFORCOMPLETED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WAIT_FOR_COMPLETED:
        if (value == null) {
          unsetWaitForCompleted();
        } else {
          setWaitForCompleted((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WAIT_FOR_COMPLETED:
        return isWaitForCompleted();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WAIT_FOR_COMPLETED:
        return isSetWaitForCompleted();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pauseResolveScheduler_args)
        return this.equals((pauseResolveScheduler_args)that);
      return false;
    }

    public boolean equals(pauseResolveScheduler_args that) {
      if (that == null)
        return false;

      boolean this_present_waitForCompleted = true;
      boolean that_present_waitForCompleted = true;
      if (this_present_waitForCompleted || that_present_waitForCompleted) {
        if (!(this_present_waitForCompleted && that_present_waitForCompleted))
          return false;
        if (this.waitForCompleted != that.waitForCompleted)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_waitForCompleted = true;
      list.add(present_waitForCompleted);
      if (present_waitForCompleted)
        list.add(waitForCompleted);

      return list.hashCode();
    }

    @Override
    public int compareTo(pauseResolveScheduler_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWaitForCompleted()).compareTo(other.isSetWaitForCompleted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWaitForCompleted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitForCompleted, other.waitForCompleted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pauseResolveScheduler_args(");
      boolean first = true;

      sb.append("waitForCompleted:");
      sb.append(this.waitForCompleted);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pauseResolveScheduler_argsStandardSchemeFactory implements SchemeFactory {
      public pauseResolveScheduler_argsStandardScheme getScheme() {
        return new pauseResolveScheduler_argsStandardScheme();
      }
    }

    private static class pauseResolveScheduler_argsStandardScheme extends StandardScheme<pauseResolveScheduler_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pauseResolveScheduler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // WAIT_FOR_COMPLETED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.waitForCompleted = iprot.readBool();
                struct.setWaitForCompletedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pauseResolveScheduler_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WAIT_FOR_COMPLETED_FIELD_DESC);
        oprot.writeBool(struct.waitForCompleted);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pauseResolveScheduler_argsTupleSchemeFactory implements SchemeFactory {
      public pauseResolveScheduler_argsTupleScheme getScheme() {
        return new pauseResolveScheduler_argsTupleScheme();
      }
    }

    private static class pauseResolveScheduler_argsTupleScheme extends TupleScheme<pauseResolveScheduler_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pauseResolveScheduler_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWaitForCompleted()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWaitForCompleted()) {
          oprot.writeBool(struct.waitForCompleted);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pauseResolveScheduler_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.waitForCompleted = iprot.readBool();
          struct.setWaitForCompletedIsSet(true);
        }
      }
    }

  }

  public static class pauseResolveScheduler_result implements org.apache.thrift.TBase<pauseResolveScheduler_result, pauseResolveScheduler_result._Fields>, java.io.Serializable, Cloneable, Comparable<pauseResolveScheduler_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pauseResolveScheduler_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pauseResolveScheduler_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pauseResolveScheduler_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pauseResolveScheduler_result.class, metaDataMap);
    }

    public pauseResolveScheduler_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pauseResolveScheduler_result(pauseResolveScheduler_result other) {
    }

    public pauseResolveScheduler_result deepCopy() {
      return new pauseResolveScheduler_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pauseResolveScheduler_result)
        return this.equals((pauseResolveScheduler_result)that);
      return false;
    }

    public boolean equals(pauseResolveScheduler_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(pauseResolveScheduler_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pauseResolveScheduler_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pauseResolveScheduler_resultStandardSchemeFactory implements SchemeFactory {
      public pauseResolveScheduler_resultStandardScheme getScheme() {
        return new pauseResolveScheduler_resultStandardScheme();
      }
    }

    private static class pauseResolveScheduler_resultStandardScheme extends StandardScheme<pauseResolveScheduler_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pauseResolveScheduler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pauseResolveScheduler_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pauseResolveScheduler_resultTupleSchemeFactory implements SchemeFactory {
      public pauseResolveScheduler_resultTupleScheme getScheme() {
        return new pauseResolveScheduler_resultTupleScheme();
      }
    }

    private static class pauseResolveScheduler_resultTupleScheme extends TupleScheme<pauseResolveScheduler_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pauseResolveScheduler_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pauseResolveScheduler_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
