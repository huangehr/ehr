/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yihu.ehr.profile;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-14")
public class TEhrService {

  public interface Iface {

    /**
     * 加载一份健康档案。需要指定档案ID及要是否加载标准化或原始档案数据。
     * 
     * 
     * @param profileId
     * @param loadStdData
     * @param loadOriData
     */
    public com.yihu.ehr.profile.TEhrProfile loadProfile(String profileId, boolean loadStdData, boolean loadOriData) throws org.apache.thrift.TException;

    public com.yihu.ehr.profile.TEhrDataSet loadDataSet(com.yihu.ehr.profile.TEhrDataSet dataSet) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void loadProfile(String profileId, boolean loadStdData, boolean loadOriData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadDataSet(com.yihu.ehr.profile.TEhrDataSet dataSet, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.yihu.ehr.profile.TEhrProfile loadProfile(String profileId, boolean loadStdData, boolean loadOriData) throws org.apache.thrift.TException
    {
      send_loadProfile(profileId, loadStdData, loadOriData);
      return recv_loadProfile();
    }

    public void send_loadProfile(String profileId, boolean loadStdData, boolean loadOriData) throws org.apache.thrift.TException
    {
      loadProfile_args args = new loadProfile_args();
      args.setProfileId(profileId);
      args.setLoadStdData(loadStdData);
      args.setLoadOriData(loadOriData);
      sendBase("loadProfile", args);
    }

    public com.yihu.ehr.profile.TEhrProfile recv_loadProfile() throws org.apache.thrift.TException
    {
      loadProfile_result result = new loadProfile_result();
      receiveBase(result, "loadProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadProfile failed: unknown result");
    }

    public com.yihu.ehr.profile.TEhrDataSet loadDataSet(com.yihu.ehr.profile.TEhrDataSet dataSet) throws org.apache.thrift.TException
    {
      send_loadDataSet(dataSet);
      return recv_loadDataSet();
    }

    public void send_loadDataSet(com.yihu.ehr.profile.TEhrDataSet dataSet) throws org.apache.thrift.TException
    {
      loadDataSet_args args = new loadDataSet_args();
      args.setDataSet(dataSet);
      sendBase("loadDataSet", args);
    }

    public com.yihu.ehr.profile.TEhrDataSet recv_loadDataSet() throws org.apache.thrift.TException
    {
      loadDataSet_result result = new loadDataSet_result();
      receiveBase(result, "loadDataSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadDataSet failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void loadProfile(String profileId, boolean loadStdData, boolean loadOriData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadProfile_call method_call = new loadProfile_call(profileId, loadStdData, loadOriData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String profileId;
      private boolean loadStdData;
      private boolean loadOriData;
      public loadProfile_call(String profileId, boolean loadStdData, boolean loadOriData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileId = profileId;
        this.loadStdData = loadStdData;
        this.loadOriData = loadOriData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadProfile_args args = new loadProfile_args();
        args.setProfileId(profileId);
        args.setLoadStdData(loadStdData);
        args.setLoadOriData(loadOriData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.yihu.ehr.profile.TEhrProfile getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadProfile();
      }
    }

    public void loadDataSet(com.yihu.ehr.profile.TEhrDataSet dataSet, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadDataSet_call method_call = new loadDataSet_call(dataSet, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadDataSet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.yihu.ehr.profile.TEhrDataSet dataSet;
      public loadDataSet_call(com.yihu.ehr.profile.TEhrDataSet dataSet, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataSet = dataSet;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadDataSet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadDataSet_args args = new loadDataSet_args();
        args.setDataSet(dataSet);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.yihu.ehr.profile.TEhrDataSet getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadDataSet();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("loadProfile", new loadProfile());
      processMap.put("loadDataSet", new loadDataSet());
      return processMap;
    }

    public static class loadProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadProfile_args> {
      public loadProfile() {
        super("loadProfile");
      }

      public loadProfile_args getEmptyArgsInstance() {
        return new loadProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadProfile_result getResult(I iface, loadProfile_args args) throws org.apache.thrift.TException {
        loadProfile_result result = new loadProfile_result();
        result.success = iface.loadProfile(args.profileId, args.loadStdData, args.loadOriData);
        return result;
      }
    }

    public static class loadDataSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadDataSet_args> {
      public loadDataSet() {
        super("loadDataSet");
      }

      public loadDataSet_args getEmptyArgsInstance() {
        return new loadDataSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadDataSet_result getResult(I iface, loadDataSet_args args) throws org.apache.thrift.TException {
        loadDataSet_result result = new loadDataSet_result();
        result.success = iface.loadDataSet(args.dataSet);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("loadProfile", new loadProfile());
      processMap.put("loadDataSet", new loadDataSet());
      return processMap;
    }

    public static class loadProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadProfile_args, com.yihu.ehr.profile.TEhrProfile> {
      public loadProfile() {
        super("loadProfile");
      }

      public loadProfile_args getEmptyArgsInstance() {
        return new loadProfile_args();
      }

      public AsyncMethodCallback<com.yihu.ehr.profile.TEhrProfile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.yihu.ehr.profile.TEhrProfile>() { 
          public void onComplete(com.yihu.ehr.profile.TEhrProfile o) {
            loadProfile_result result = new loadProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadProfile_result result = new loadProfile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.yihu.ehr.profile.TEhrProfile> resultHandler) throws TException {
        iface.loadProfile(args.profileId, args.loadStdData, args.loadOriData,resultHandler);
      }
    }

    public static class loadDataSet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadDataSet_args, com.yihu.ehr.profile.TEhrDataSet> {
      public loadDataSet() {
        super("loadDataSet");
      }

      public loadDataSet_args getEmptyArgsInstance() {
        return new loadDataSet_args();
      }

      public AsyncMethodCallback<com.yihu.ehr.profile.TEhrDataSet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.yihu.ehr.profile.TEhrDataSet>() { 
          public void onComplete(com.yihu.ehr.profile.TEhrDataSet o) {
            loadDataSet_result result = new loadDataSet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadDataSet_result result = new loadDataSet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadDataSet_args args, org.apache.thrift.async.AsyncMethodCallback<com.yihu.ehr.profile.TEhrDataSet> resultHandler) throws TException {
        iface.loadDataSet(args.dataSet,resultHandler);
      }
    }

  }

  public static class loadProfile_args implements org.apache.thrift.TBase<loadProfile_args, loadProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadProfile_args");

    private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOAD_STD_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("loadStdData", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField LOAD_ORI_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("loadOriData", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadProfile_argsTupleSchemeFactory());
    }

    public String profileId; // required
    public boolean loadStdData; // required
    public boolean loadOriData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_ID((short)1, "profileId"),
      LOAD_STD_DATA((short)2, "loadStdData"),
      LOAD_ORI_DATA((short)3, "loadOriData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_ID
            return PROFILE_ID;
          case 2: // LOAD_STD_DATA
            return LOAD_STD_DATA;
          case 3: // LOAD_ORI_DATA
            return LOAD_ORI_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOADSTDDATA_ISSET_ID = 0;
    private static final int __LOADORIDATA_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOAD_STD_DATA, new org.apache.thrift.meta_data.FieldMetaData("loadStdData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LOAD_ORI_DATA, new org.apache.thrift.meta_data.FieldMetaData("loadOriData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadProfile_args.class, metaDataMap);
    }

    public loadProfile_args() {
    }

    public loadProfile_args(
      String profileId,
      boolean loadStdData,
      boolean loadOriData)
    {
      this();
      this.profileId = profileId;
      this.loadStdData = loadStdData;
      setLoadStdDataIsSet(true);
      this.loadOriData = loadOriData;
      setLoadOriDataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadProfile_args(loadProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProfileId()) {
        this.profileId = other.profileId;
      }
      this.loadStdData = other.loadStdData;
      this.loadOriData = other.loadOriData;
    }

    public loadProfile_args deepCopy() {
      return new loadProfile_args(this);
    }

    @Override
    public void clear() {
      this.profileId = null;
      setLoadStdDataIsSet(false);
      this.loadStdData = false;
      setLoadOriDataIsSet(false);
      this.loadOriData = false;
    }

    public String getProfileId() {
      return this.profileId;
    }

    public loadProfile_args setProfileId(String profileId) {
      this.profileId = profileId;
      return this;
    }

    public void unsetProfileId() {
      this.profileId = null;
    }

    /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileId() {
      return this.profileId != null;
    }

    public void setProfileIdIsSet(boolean value) {
      if (!value) {
        this.profileId = null;
      }
    }

    public boolean isLoadStdData() {
      return this.loadStdData;
    }

    public loadProfile_args setLoadStdData(boolean loadStdData) {
      this.loadStdData = loadStdData;
      setLoadStdDataIsSet(true);
      return this;
    }

    public void unsetLoadStdData() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOADSTDDATA_ISSET_ID);
    }

    /** Returns true if field loadStdData is set (has been assigned a value) and false otherwise */
    public boolean isSetLoadStdData() {
      return EncodingUtils.testBit(__isset_bitfield, __LOADSTDDATA_ISSET_ID);
    }

    public void setLoadStdDataIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOADSTDDATA_ISSET_ID, value);
    }

    public boolean isLoadOriData() {
      return this.loadOriData;
    }

    public loadProfile_args setLoadOriData(boolean loadOriData) {
      this.loadOriData = loadOriData;
      setLoadOriDataIsSet(true);
      return this;
    }

    public void unsetLoadOriData() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOADORIDATA_ISSET_ID);
    }

    /** Returns true if field loadOriData is set (has been assigned a value) and false otherwise */
    public boolean isSetLoadOriData() {
      return EncodingUtils.testBit(__isset_bitfield, __LOADORIDATA_ISSET_ID);
    }

    public void setLoadOriDataIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOADORIDATA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_ID:
        if (value == null) {
          unsetProfileId();
        } else {
          setProfileId((String)value);
        }
        break;

      case LOAD_STD_DATA:
        if (value == null) {
          unsetLoadStdData();
        } else {
          setLoadStdData((Boolean)value);
        }
        break;

      case LOAD_ORI_DATA:
        if (value == null) {
          unsetLoadOriData();
        } else {
          setLoadOriData((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_ID:
        return getProfileId();

      case LOAD_STD_DATA:
        return isLoadStdData();

      case LOAD_ORI_DATA:
        return isLoadOriData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_ID:
        return isSetProfileId();
      case LOAD_STD_DATA:
        return isSetLoadStdData();
      case LOAD_ORI_DATA:
        return isSetLoadOriData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadProfile_args)
        return this.equals((loadProfile_args)that);
      return false;
    }

    public boolean equals(loadProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_profileId = true && this.isSetProfileId();
      boolean that_present_profileId = true && that.isSetProfileId();
      if (this_present_profileId || that_present_profileId) {
        if (!(this_present_profileId && that_present_profileId))
          return false;
        if (!this.profileId.equals(that.profileId))
          return false;
      }

      boolean this_present_loadStdData = true;
      boolean that_present_loadStdData = true;
      if (this_present_loadStdData || that_present_loadStdData) {
        if (!(this_present_loadStdData && that_present_loadStdData))
          return false;
        if (this.loadStdData != that.loadStdData)
          return false;
      }

      boolean this_present_loadOriData = true;
      boolean that_present_loadOriData = true;
      if (this_present_loadOriData || that_present_loadOriData) {
        if (!(this_present_loadOriData && that_present_loadOriData))
          return false;
        if (this.loadOriData != that.loadOriData)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileId = true && (isSetProfileId());
      list.add(present_profileId);
      if (present_profileId)
        list.add(profileId);

      boolean present_loadStdData = true;
      list.add(present_loadStdData);
      if (present_loadStdData)
        list.add(loadStdData);

      boolean present_loadOriData = true;
      list.add(present_loadOriData);
      if (present_loadOriData)
        list.add(loadOriData);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoadStdData()).compareTo(other.isSetLoadStdData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoadStdData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadStdData, other.loadStdData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoadOriData()).compareTo(other.isSetLoadOriData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoadOriData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadOriData, other.loadOriData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadProfile_args(");
      boolean first = true;

      sb.append("profileId:");
      if (this.profileId == null) {
        sb.append("null");
      } else {
        sb.append(this.profileId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loadStdData:");
      sb.append(this.loadStdData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loadOriData:");
      sb.append(this.loadOriData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadProfile_argsStandardSchemeFactory implements SchemeFactory {
      public loadProfile_argsStandardScheme getScheme() {
        return new loadProfile_argsStandardScheme();
      }
    }

    private static class loadProfile_argsStandardScheme extends StandardScheme<loadProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.profileId = iprot.readString();
                struct.setProfileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOAD_STD_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.loadStdData = iprot.readBool();
                struct.setLoadStdDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOAD_ORI_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.loadOriData = iprot.readBool();
                struct.setLoadOriDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileId != null) {
          oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
          oprot.writeString(struct.profileId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LOAD_STD_DATA_FIELD_DESC);
        oprot.writeBool(struct.loadStdData);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOAD_ORI_DATA_FIELD_DESC);
        oprot.writeBool(struct.loadOriData);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadProfile_argsTupleSchemeFactory implements SchemeFactory {
      public loadProfile_argsTupleScheme getScheme() {
        return new loadProfile_argsTupleScheme();
      }
    }

    private static class loadProfile_argsTupleScheme extends TupleScheme<loadProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileId()) {
          optionals.set(0);
        }
        if (struct.isSetLoadStdData()) {
          optionals.set(1);
        }
        if (struct.isSetLoadOriData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProfileId()) {
          oprot.writeString(struct.profileId);
        }
        if (struct.isSetLoadStdData()) {
          oprot.writeBool(struct.loadStdData);
        }
        if (struct.isSetLoadOriData()) {
          oprot.writeBool(struct.loadOriData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.profileId = iprot.readString();
          struct.setProfileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loadStdData = iprot.readBool();
          struct.setLoadStdDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.loadOriData = iprot.readBool();
          struct.setLoadOriDataIsSet(true);
        }
      }
    }

  }

  public static class loadProfile_result implements org.apache.thrift.TBase<loadProfile_result, loadProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadProfile_resultTupleSchemeFactory());
    }

    public com.yihu.ehr.profile.TEhrProfile success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.profile.TEhrProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadProfile_result.class, metaDataMap);
    }

    public loadProfile_result() {
    }

    public loadProfile_result(
      com.yihu.ehr.profile.TEhrProfile success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadProfile_result(loadProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.yihu.ehr.profile.TEhrProfile(other.success);
      }
    }

    public loadProfile_result deepCopy() {
      return new loadProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.yihu.ehr.profile.TEhrProfile getSuccess() {
      return this.success;
    }

    public loadProfile_result setSuccess(com.yihu.ehr.profile.TEhrProfile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.yihu.ehr.profile.TEhrProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadProfile_result)
        return this.equals((loadProfile_result)that);
      return false;
    }

    public boolean equals(loadProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadProfile_resultStandardSchemeFactory implements SchemeFactory {
      public loadProfile_resultStandardScheme getScheme() {
        return new loadProfile_resultStandardScheme();
      }
    }

    private static class loadProfile_resultStandardScheme extends StandardScheme<loadProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.yihu.ehr.profile.TEhrProfile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadProfile_resultTupleSchemeFactory implements SchemeFactory {
      public loadProfile_resultTupleScheme getScheme() {
        return new loadProfile_resultTupleScheme();
      }
    }

    private static class loadProfile_resultTupleScheme extends TupleScheme<loadProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.yihu.ehr.profile.TEhrProfile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadDataSet_args implements org.apache.thrift.TBase<loadDataSet_args, loadDataSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadDataSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadDataSet_args");

    private static final org.apache.thrift.protocol.TField DATA_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSet", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadDataSet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadDataSet_argsTupleSchemeFactory());
    }

    public com.yihu.ehr.profile.TEhrDataSet dataSet; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_SET((short)1, "dataSet");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_SET
            return DATA_SET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_SET, new org.apache.thrift.meta_data.FieldMetaData("dataSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.profile.TEhrDataSet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadDataSet_args.class, metaDataMap);
    }

    public loadDataSet_args() {
    }

    public loadDataSet_args(
      com.yihu.ehr.profile.TEhrDataSet dataSet)
    {
      this();
      this.dataSet = dataSet;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadDataSet_args(loadDataSet_args other) {
      if (other.isSetDataSet()) {
        this.dataSet = new com.yihu.ehr.profile.TEhrDataSet(other.dataSet);
      }
    }

    public loadDataSet_args deepCopy() {
      return new loadDataSet_args(this);
    }

    @Override
    public void clear() {
      this.dataSet = null;
    }

    public com.yihu.ehr.profile.TEhrDataSet getDataSet() {
      return this.dataSet;
    }

    public loadDataSet_args setDataSet(com.yihu.ehr.profile.TEhrDataSet dataSet) {
      this.dataSet = dataSet;
      return this;
    }

    public void unsetDataSet() {
      this.dataSet = null;
    }

    /** Returns true if field dataSet is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSet() {
      return this.dataSet != null;
    }

    public void setDataSetIsSet(boolean value) {
      if (!value) {
        this.dataSet = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_SET:
        if (value == null) {
          unsetDataSet();
        } else {
          setDataSet((com.yihu.ehr.profile.TEhrDataSet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_SET:
        return getDataSet();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_SET:
        return isSetDataSet();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadDataSet_args)
        return this.equals((loadDataSet_args)that);
      return false;
    }

    public boolean equals(loadDataSet_args that) {
      if (that == null)
        return false;

      boolean this_present_dataSet = true && this.isSetDataSet();
      boolean that_present_dataSet = true && that.isSetDataSet();
      if (this_present_dataSet || that_present_dataSet) {
        if (!(this_present_dataSet && that_present_dataSet))
          return false;
        if (!this.dataSet.equals(that.dataSet))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dataSet = true && (isSetDataSet());
      list.add(present_dataSet);
      if (present_dataSet)
        list.add(dataSet);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadDataSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataSet()).compareTo(other.isSetDataSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSet, other.dataSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadDataSet_args(");
      boolean first = true;

      sb.append("dataSet:");
      if (this.dataSet == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSet);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dataSet != null) {
        dataSet.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadDataSet_argsStandardSchemeFactory implements SchemeFactory {
      public loadDataSet_argsStandardScheme getScheme() {
        return new loadDataSet_argsStandardScheme();
      }
    }

    private static class loadDataSet_argsStandardScheme extends StandardScheme<loadDataSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadDataSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataSet = new com.yihu.ehr.profile.TEhrDataSet();
                struct.dataSet.read(iprot);
                struct.setDataSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadDataSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataSet != null) {
          oprot.writeFieldBegin(DATA_SET_FIELD_DESC);
          struct.dataSet.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadDataSet_argsTupleSchemeFactory implements SchemeFactory {
      public loadDataSet_argsTupleScheme getScheme() {
        return new loadDataSet_argsTupleScheme();
      }
    }

    private static class loadDataSet_argsTupleScheme extends TupleScheme<loadDataSet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadDataSet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDataSet()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDataSet()) {
          struct.dataSet.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadDataSet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dataSet = new com.yihu.ehr.profile.TEhrDataSet();
          struct.dataSet.read(iprot);
          struct.setDataSetIsSet(true);
        }
      }
    }

  }

  public static class loadDataSet_result implements org.apache.thrift.TBase<loadDataSet_result, loadDataSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadDataSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadDataSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadDataSet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadDataSet_resultTupleSchemeFactory());
    }

    public com.yihu.ehr.profile.TEhrDataSet success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.profile.TEhrDataSet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadDataSet_result.class, metaDataMap);
    }

    public loadDataSet_result() {
    }

    public loadDataSet_result(
      com.yihu.ehr.profile.TEhrDataSet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadDataSet_result(loadDataSet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.yihu.ehr.profile.TEhrDataSet(other.success);
      }
    }

    public loadDataSet_result deepCopy() {
      return new loadDataSet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.yihu.ehr.profile.TEhrDataSet getSuccess() {
      return this.success;
    }

    public loadDataSet_result setSuccess(com.yihu.ehr.profile.TEhrDataSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.yihu.ehr.profile.TEhrDataSet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadDataSet_result)
        return this.equals((loadDataSet_result)that);
      return false;
    }

    public boolean equals(loadDataSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadDataSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadDataSet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadDataSet_resultStandardSchemeFactory implements SchemeFactory {
      public loadDataSet_resultStandardScheme getScheme() {
        return new loadDataSet_resultStandardScheme();
      }
    }

    private static class loadDataSet_resultStandardScheme extends StandardScheme<loadDataSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadDataSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.yihu.ehr.profile.TEhrDataSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadDataSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadDataSet_resultTupleSchemeFactory implements SchemeFactory {
      public loadDataSet_resultTupleScheme getScheme() {
        return new loadDataSet_resultTupleScheme();
      }
    }

    private static class loadDataSet_resultTupleScheme extends TupleScheme<loadDataSet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadDataSet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadDataSet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.yihu.ehr.profile.TEhrDataSet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
