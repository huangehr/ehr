/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yihu.ehr.profile;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-15")
public class TEhrService {

  public interface Iface {

    /**
     * 加载一份健康档案。需要指定档案ID及要是否加载标准化或原始档案数据。
     * 
     * 
     * @param profileId
     * @param loadStdData
     * @param loadOriData
     */
    public com.yihu.ehr.profile.TEhrProfile getProfile(String profileId, boolean loadStdData, boolean loadOriData) throws org.apache.thrift.TException;

    /**
     * 获取数据集
     * 
     * 
     * @param dataSetCode
     */
    public com.yihu.ehr.profile.TEhrDataSet getDataSet(String dataSetCode) throws org.apache.thrift.TException;

    /**
     * 获取指定患者一段时间内的健康档案
     * 
     * 
     * @param demographicId
     * @param since
     * @param to
     * @param loadStdDataSet
     * @param loadOriDataSet
     */
    public List<com.yihu.ehr.profile.TEhrProfile> getProfiles(String demographicId, long since, long to, boolean loadStdDataSet, boolean loadOriDataSet) throws org.apache.thrift.TException;

    /**
     * 搜索患者的健康档案
     * 
     * 
     * @param criteria
     */
    public List<com.yihu.ehr.profile.TEhrProfile> searchProfiles(Map<String,String> criteria) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getProfile(String profileId, boolean loadStdData, boolean loadOriData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDataSet(String dataSetCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfiles(String demographicId, long since, long to, boolean loadStdDataSet, boolean loadOriDataSet, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchProfiles(Map<String,String> criteria, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.yihu.ehr.profile.TEhrProfile getProfile(String profileId, boolean loadStdData, boolean loadOriData) throws org.apache.thrift.TException
    {
      send_getProfile(profileId, loadStdData, loadOriData);
      return recv_getProfile();
    }

    public void send_getProfile(String profileId, boolean loadStdData, boolean loadOriData) throws org.apache.thrift.TException
    {
      getProfile_args args = new getProfile_args();
      args.setProfileId(profileId);
      args.setLoadStdData(loadStdData);
      args.setLoadOriData(loadOriData);
      sendBase("getProfile", args);
    }

    public com.yihu.ehr.profile.TEhrProfile recv_getProfile() throws org.apache.thrift.TException
    {
      getProfile_result result = new getProfile_result();
      receiveBase(result, "getProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfile failed: unknown result");
    }

    public com.yihu.ehr.profile.TEhrDataSet getDataSet(String dataSetCode) throws org.apache.thrift.TException
    {
      send_getDataSet(dataSetCode);
      return recv_getDataSet();
    }

    public void send_getDataSet(String dataSetCode) throws org.apache.thrift.TException
    {
      getDataSet_args args = new getDataSet_args();
      args.setDataSetCode(dataSetCode);
      sendBase("getDataSet", args);
    }

    public com.yihu.ehr.profile.TEhrDataSet recv_getDataSet() throws org.apache.thrift.TException
    {
      getDataSet_result result = new getDataSet_result();
      receiveBase(result, "getDataSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataSet failed: unknown result");
    }

    public List<com.yihu.ehr.profile.TEhrProfile> getProfiles(String demographicId, long since, long to, boolean loadStdDataSet, boolean loadOriDataSet) throws org.apache.thrift.TException
    {
      send_getProfiles(demographicId, since, to, loadStdDataSet, loadOriDataSet);
      return recv_getProfiles();
    }

    public void send_getProfiles(String demographicId, long since, long to, boolean loadStdDataSet, boolean loadOriDataSet) throws org.apache.thrift.TException
    {
      getProfiles_args args = new getProfiles_args();
      args.setDemographicId(demographicId);
      args.setSince(since);
      args.setTo(to);
      args.setLoadStdDataSet(loadStdDataSet);
      args.setLoadOriDataSet(loadOriDataSet);
      sendBase("getProfiles", args);
    }

    public List<com.yihu.ehr.profile.TEhrProfile> recv_getProfiles() throws org.apache.thrift.TException
    {
      getProfiles_result result = new getProfiles_result();
      receiveBase(result, "getProfiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfiles failed: unknown result");
    }

    public List<com.yihu.ehr.profile.TEhrProfile> searchProfiles(Map<String,String> criteria) throws org.apache.thrift.TException
    {
      send_searchProfiles(criteria);
      return recv_searchProfiles();
    }

    public void send_searchProfiles(Map<String,String> criteria) throws org.apache.thrift.TException
    {
      searchProfiles_args args = new searchProfiles_args();
      args.setCriteria(criteria);
      sendBase("searchProfiles", args);
    }

    public List<com.yihu.ehr.profile.TEhrProfile> recv_searchProfiles() throws org.apache.thrift.TException
    {
      searchProfiles_result result = new searchProfiles_result();
      receiveBase(result, "searchProfiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchProfiles failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getProfile(String profileId, boolean loadStdData, boolean loadOriData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfile_call method_call = new getProfile_call(profileId, loadStdData, loadOriData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String profileId;
      private boolean loadStdData;
      private boolean loadOriData;
      public getProfile_call(String profileId, boolean loadStdData, boolean loadOriData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileId = profileId;
        this.loadStdData = loadStdData;
        this.loadOriData = loadOriData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfile_args args = new getProfile_args();
        args.setProfileId(profileId);
        args.setLoadStdData(loadStdData);
        args.setLoadOriData(loadOriData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.yihu.ehr.profile.TEhrProfile getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfile();
      }
    }

    public void getDataSet(String dataSetCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDataSet_call method_call = new getDataSet_call(dataSetCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDataSet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dataSetCode;
      public getDataSet_call(String dataSetCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataSetCode = dataSetCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataSet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDataSet_args args = new getDataSet_args();
        args.setDataSetCode(dataSetCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.yihu.ehr.profile.TEhrDataSet getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDataSet();
      }
    }

    public void getProfiles(String demographicId, long since, long to, boolean loadStdDataSet, boolean loadOriDataSet, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfiles_call method_call = new getProfiles_call(demographicId, since, to, loadStdDataSet, loadOriDataSet, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfiles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String demographicId;
      private long since;
      private long to;
      private boolean loadStdDataSet;
      private boolean loadOriDataSet;
      public getProfiles_call(String demographicId, long since, long to, boolean loadStdDataSet, boolean loadOriDataSet, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.demographicId = demographicId;
        this.since = since;
        this.to = to;
        this.loadStdDataSet = loadStdDataSet;
        this.loadOriDataSet = loadOriDataSet;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfiles_args args = new getProfiles_args();
        args.setDemographicId(demographicId);
        args.setSince(since);
        args.setTo(to);
        args.setLoadStdDataSet(loadStdDataSet);
        args.setLoadOriDataSet(loadOriDataSet);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.yihu.ehr.profile.TEhrProfile> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfiles();
      }
    }

    public void searchProfiles(Map<String,String> criteria, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchProfiles_call method_call = new searchProfiles_call(criteria, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchProfiles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> criteria;
      public searchProfiles_call(Map<String,String> criteria, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.criteria = criteria;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchProfiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchProfiles_args args = new searchProfiles_args();
        args.setCriteria(criteria);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.yihu.ehr.profile.TEhrProfile> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchProfiles();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getProfile", new getProfile());
      processMap.put("getDataSet", new getDataSet());
      processMap.put("getProfiles", new getProfiles());
      processMap.put("searchProfiles", new searchProfiles());
      return processMap;
    }

    public static class getProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfile_args> {
      public getProfile() {
        super("getProfile");
      }

      public getProfile_args getEmptyArgsInstance() {
        return new getProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfile_result getResult(I iface, getProfile_args args) throws org.apache.thrift.TException {
        getProfile_result result = new getProfile_result();
        result.success = iface.getProfile(args.profileId, args.loadStdData, args.loadOriData);
        return result;
      }
    }

    public static class getDataSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDataSet_args> {
      public getDataSet() {
        super("getDataSet");
      }

      public getDataSet_args getEmptyArgsInstance() {
        return new getDataSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDataSet_result getResult(I iface, getDataSet_args args) throws org.apache.thrift.TException {
        getDataSet_result result = new getDataSet_result();
        result.success = iface.getDataSet(args.dataSetCode);
        return result;
      }
    }

    public static class getProfiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfiles_args> {
      public getProfiles() {
        super("getProfiles");
      }

      public getProfiles_args getEmptyArgsInstance() {
        return new getProfiles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfiles_result getResult(I iface, getProfiles_args args) throws org.apache.thrift.TException {
        getProfiles_result result = new getProfiles_result();
        result.success = iface.getProfiles(args.demographicId, args.since, args.to, args.loadStdDataSet, args.loadOriDataSet);
        return result;
      }
    }

    public static class searchProfiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchProfiles_args> {
      public searchProfiles() {
        super("searchProfiles");
      }

      public searchProfiles_args getEmptyArgsInstance() {
        return new searchProfiles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchProfiles_result getResult(I iface, searchProfiles_args args) throws org.apache.thrift.TException {
        searchProfiles_result result = new searchProfiles_result();
        result.success = iface.searchProfiles(args.criteria);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getProfile", new getProfile());
      processMap.put("getDataSet", new getDataSet());
      processMap.put("getProfiles", new getProfiles());
      processMap.put("searchProfiles", new searchProfiles());
      return processMap;
    }

    public static class getProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfile_args, com.yihu.ehr.profile.TEhrProfile> {
      public getProfile() {
        super("getProfile");
      }

      public getProfile_args getEmptyArgsInstance() {
        return new getProfile_args();
      }

      public AsyncMethodCallback<com.yihu.ehr.profile.TEhrProfile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.yihu.ehr.profile.TEhrProfile>() { 
          public void onComplete(com.yihu.ehr.profile.TEhrProfile o) {
            getProfile_result result = new getProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfile_result result = new getProfile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.yihu.ehr.profile.TEhrProfile> resultHandler) throws TException {
        iface.getProfile(args.profileId, args.loadStdData, args.loadOriData,resultHandler);
      }
    }

    public static class getDataSet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDataSet_args, com.yihu.ehr.profile.TEhrDataSet> {
      public getDataSet() {
        super("getDataSet");
      }

      public getDataSet_args getEmptyArgsInstance() {
        return new getDataSet_args();
      }

      public AsyncMethodCallback<com.yihu.ehr.profile.TEhrDataSet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.yihu.ehr.profile.TEhrDataSet>() { 
          public void onComplete(com.yihu.ehr.profile.TEhrDataSet o) {
            getDataSet_result result = new getDataSet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDataSet_result result = new getDataSet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDataSet_args args, org.apache.thrift.async.AsyncMethodCallback<com.yihu.ehr.profile.TEhrDataSet> resultHandler) throws TException {
        iface.getDataSet(args.dataSetCode,resultHandler);
      }
    }

    public static class getProfiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfiles_args, List<com.yihu.ehr.profile.TEhrProfile>> {
      public getProfiles() {
        super("getProfiles");
      }

      public getProfiles_args getEmptyArgsInstance() {
        return new getProfiles_args();
      }

      public AsyncMethodCallback<List<com.yihu.ehr.profile.TEhrProfile>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.yihu.ehr.profile.TEhrProfile>>() { 
          public void onComplete(List<com.yihu.ehr.profile.TEhrProfile> o) {
            getProfiles_result result = new getProfiles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfiles_result result = new getProfiles_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfiles_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.yihu.ehr.profile.TEhrProfile>> resultHandler) throws TException {
        iface.getProfiles(args.demographicId, args.since, args.to, args.loadStdDataSet, args.loadOriDataSet,resultHandler);
      }
    }

    public static class searchProfiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchProfiles_args, List<com.yihu.ehr.profile.TEhrProfile>> {
      public searchProfiles() {
        super("searchProfiles");
      }

      public searchProfiles_args getEmptyArgsInstance() {
        return new searchProfiles_args();
      }

      public AsyncMethodCallback<List<com.yihu.ehr.profile.TEhrProfile>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.yihu.ehr.profile.TEhrProfile>>() { 
          public void onComplete(List<com.yihu.ehr.profile.TEhrProfile> o) {
            searchProfiles_result result = new searchProfiles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchProfiles_result result = new searchProfiles_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchProfiles_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.yihu.ehr.profile.TEhrProfile>> resultHandler) throws TException {
        iface.searchProfiles(args.criteria,resultHandler);
      }
    }

  }

  public static class getProfile_args implements org.apache.thrift.TBase<getProfile_args, getProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfile_args");

    private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOAD_STD_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("loadStdData", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField LOAD_ORI_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("loadOriData", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfile_argsTupleSchemeFactory());
    }

    public String profileId; // required
    public boolean loadStdData; // required
    public boolean loadOriData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_ID((short)1, "profileId"),
      LOAD_STD_DATA((short)2, "loadStdData"),
      LOAD_ORI_DATA((short)3, "loadOriData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_ID
            return PROFILE_ID;
          case 2: // LOAD_STD_DATA
            return LOAD_STD_DATA;
          case 3: // LOAD_ORI_DATA
            return LOAD_ORI_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOADSTDDATA_ISSET_ID = 0;
    private static final int __LOADORIDATA_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOAD_STD_DATA, new org.apache.thrift.meta_data.FieldMetaData("loadStdData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LOAD_ORI_DATA, new org.apache.thrift.meta_data.FieldMetaData("loadOriData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfile_args.class, metaDataMap);
    }

    public getProfile_args() {
    }

    public getProfile_args(
      String profileId,
      boolean loadStdData,
      boolean loadOriData)
    {
      this();
      this.profileId = profileId;
      this.loadStdData = loadStdData;
      setLoadStdDataIsSet(true);
      this.loadOriData = loadOriData;
      setLoadOriDataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfile_args(getProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProfileId()) {
        this.profileId = other.profileId;
      }
      this.loadStdData = other.loadStdData;
      this.loadOriData = other.loadOriData;
    }

    public getProfile_args deepCopy() {
      return new getProfile_args(this);
    }

    @Override
    public void clear() {
      this.profileId = null;
      setLoadStdDataIsSet(false);
      this.loadStdData = false;
      setLoadOriDataIsSet(false);
      this.loadOriData = false;
    }

    public String getProfileId() {
      return this.profileId;
    }

    public getProfile_args setProfileId(String profileId) {
      this.profileId = profileId;
      return this;
    }

    public void unsetProfileId() {
      this.profileId = null;
    }

    /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileId() {
      return this.profileId != null;
    }

    public void setProfileIdIsSet(boolean value) {
      if (!value) {
        this.profileId = null;
      }
    }

    public boolean isLoadStdData() {
      return this.loadStdData;
    }

    public getProfile_args setLoadStdData(boolean loadStdData) {
      this.loadStdData = loadStdData;
      setLoadStdDataIsSet(true);
      return this;
    }

    public void unsetLoadStdData() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOADSTDDATA_ISSET_ID);
    }

    /** Returns true if field loadStdData is set (has been assigned a value) and false otherwise */
    public boolean isSetLoadStdData() {
      return EncodingUtils.testBit(__isset_bitfield, __LOADSTDDATA_ISSET_ID);
    }

    public void setLoadStdDataIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOADSTDDATA_ISSET_ID, value);
    }

    public boolean isLoadOriData() {
      return this.loadOriData;
    }

    public getProfile_args setLoadOriData(boolean loadOriData) {
      this.loadOriData = loadOriData;
      setLoadOriDataIsSet(true);
      return this;
    }

    public void unsetLoadOriData() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOADORIDATA_ISSET_ID);
    }

    /** Returns true if field loadOriData is set (has been assigned a value) and false otherwise */
    public boolean isSetLoadOriData() {
      return EncodingUtils.testBit(__isset_bitfield, __LOADORIDATA_ISSET_ID);
    }

    public void setLoadOriDataIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOADORIDATA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_ID:
        if (value == null) {
          unsetProfileId();
        } else {
          setProfileId((String)value);
        }
        break;

      case LOAD_STD_DATA:
        if (value == null) {
          unsetLoadStdData();
        } else {
          setLoadStdData((Boolean)value);
        }
        break;

      case LOAD_ORI_DATA:
        if (value == null) {
          unsetLoadOriData();
        } else {
          setLoadOriData((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_ID:
        return getProfileId();

      case LOAD_STD_DATA:
        return isLoadStdData();

      case LOAD_ORI_DATA:
        return isLoadOriData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_ID:
        return isSetProfileId();
      case LOAD_STD_DATA:
        return isSetLoadStdData();
      case LOAD_ORI_DATA:
        return isSetLoadOriData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfile_args)
        return this.equals((getProfile_args)that);
      return false;
    }

    public boolean equals(getProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_profileId = true && this.isSetProfileId();
      boolean that_present_profileId = true && that.isSetProfileId();
      if (this_present_profileId || that_present_profileId) {
        if (!(this_present_profileId && that_present_profileId))
          return false;
        if (!this.profileId.equals(that.profileId))
          return false;
      }

      boolean this_present_loadStdData = true;
      boolean that_present_loadStdData = true;
      if (this_present_loadStdData || that_present_loadStdData) {
        if (!(this_present_loadStdData && that_present_loadStdData))
          return false;
        if (this.loadStdData != that.loadStdData)
          return false;
      }

      boolean this_present_loadOriData = true;
      boolean that_present_loadOriData = true;
      if (this_present_loadOriData || that_present_loadOriData) {
        if (!(this_present_loadOriData && that_present_loadOriData))
          return false;
        if (this.loadOriData != that.loadOriData)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileId = true && (isSetProfileId());
      list.add(present_profileId);
      if (present_profileId)
        list.add(profileId);

      boolean present_loadStdData = true;
      list.add(present_loadStdData);
      if (present_loadStdData)
        list.add(loadStdData);

      boolean present_loadOriData = true;
      list.add(present_loadOriData);
      if (present_loadOriData)
        list.add(loadOriData);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoadStdData()).compareTo(other.isSetLoadStdData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoadStdData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadStdData, other.loadStdData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoadOriData()).compareTo(other.isSetLoadOriData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoadOriData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadOriData, other.loadOriData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfile_args(");
      boolean first = true;

      sb.append("profileId:");
      if (this.profileId == null) {
        sb.append("null");
      } else {
        sb.append(this.profileId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loadStdData:");
      sb.append(this.loadStdData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loadOriData:");
      sb.append(this.loadOriData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfile_argsStandardSchemeFactory implements SchemeFactory {
      public getProfile_argsStandardScheme getScheme() {
        return new getProfile_argsStandardScheme();
      }
    }

    private static class getProfile_argsStandardScheme extends StandardScheme<getProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.profileId = iprot.readString();
                struct.setProfileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOAD_STD_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.loadStdData = iprot.readBool();
                struct.setLoadStdDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOAD_ORI_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.loadOriData = iprot.readBool();
                struct.setLoadOriDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileId != null) {
          oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
          oprot.writeString(struct.profileId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LOAD_STD_DATA_FIELD_DESC);
        oprot.writeBool(struct.loadStdData);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOAD_ORI_DATA_FIELD_DESC);
        oprot.writeBool(struct.loadOriData);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfile_argsTupleSchemeFactory implements SchemeFactory {
      public getProfile_argsTupleScheme getScheme() {
        return new getProfile_argsTupleScheme();
      }
    }

    private static class getProfile_argsTupleScheme extends TupleScheme<getProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileId()) {
          optionals.set(0);
        }
        if (struct.isSetLoadStdData()) {
          optionals.set(1);
        }
        if (struct.isSetLoadOriData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProfileId()) {
          oprot.writeString(struct.profileId);
        }
        if (struct.isSetLoadStdData()) {
          oprot.writeBool(struct.loadStdData);
        }
        if (struct.isSetLoadOriData()) {
          oprot.writeBool(struct.loadOriData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.profileId = iprot.readString();
          struct.setProfileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loadStdData = iprot.readBool();
          struct.setLoadStdDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.loadOriData = iprot.readBool();
          struct.setLoadOriDataIsSet(true);
        }
      }
    }

  }

  public static class getProfile_result implements org.apache.thrift.TBase<getProfile_result, getProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfile_resultTupleSchemeFactory());
    }

    public com.yihu.ehr.profile.TEhrProfile success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.profile.TEhrProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfile_result.class, metaDataMap);
    }

    public getProfile_result() {
    }

    public getProfile_result(
      com.yihu.ehr.profile.TEhrProfile success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfile_result(getProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.yihu.ehr.profile.TEhrProfile(other.success);
      }
    }

    public getProfile_result deepCopy() {
      return new getProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.yihu.ehr.profile.TEhrProfile getSuccess() {
      return this.success;
    }

    public getProfile_result setSuccess(com.yihu.ehr.profile.TEhrProfile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.yihu.ehr.profile.TEhrProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfile_result)
        return this.equals((getProfile_result)that);
      return false;
    }

    public boolean equals(getProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfile_resultStandardSchemeFactory implements SchemeFactory {
      public getProfile_resultStandardScheme getScheme() {
        return new getProfile_resultStandardScheme();
      }
    }

    private static class getProfile_resultStandardScheme extends StandardScheme<getProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.yihu.ehr.profile.TEhrProfile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfile_resultTupleSchemeFactory implements SchemeFactory {
      public getProfile_resultTupleScheme getScheme() {
        return new getProfile_resultTupleScheme();
      }
    }

    private static class getProfile_resultTupleScheme extends TupleScheme<getProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.yihu.ehr.profile.TEhrProfile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDataSet_args implements org.apache.thrift.TBase<getDataSet_args, getDataSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDataSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSet_args");

    private static final org.apache.thrift.protocol.TField DATA_SET_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSetCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataSet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataSet_argsTupleSchemeFactory());
    }

    public String dataSetCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_SET_CODE((short)1, "dataSetCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_SET_CODE
            return DATA_SET_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_SET_CODE, new org.apache.thrift.meta_data.FieldMetaData("dataSetCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSet_args.class, metaDataMap);
    }

    public getDataSet_args() {
    }

    public getDataSet_args(
      String dataSetCode)
    {
      this();
      this.dataSetCode = dataSetCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSet_args(getDataSet_args other) {
      if (other.isSetDataSetCode()) {
        this.dataSetCode = other.dataSetCode;
      }
    }

    public getDataSet_args deepCopy() {
      return new getDataSet_args(this);
    }

    @Override
    public void clear() {
      this.dataSetCode = null;
    }

    public String getDataSetCode() {
      return this.dataSetCode;
    }

    public getDataSet_args setDataSetCode(String dataSetCode) {
      this.dataSetCode = dataSetCode;
      return this;
    }

    public void unsetDataSetCode() {
      this.dataSetCode = null;
    }

    /** Returns true if field dataSetCode is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSetCode() {
      return this.dataSetCode != null;
    }

    public void setDataSetCodeIsSet(boolean value) {
      if (!value) {
        this.dataSetCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_SET_CODE:
        if (value == null) {
          unsetDataSetCode();
        } else {
          setDataSetCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_SET_CODE:
        return getDataSetCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_SET_CODE:
        return isSetDataSetCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSet_args)
        return this.equals((getDataSet_args)that);
      return false;
    }

    public boolean equals(getDataSet_args that) {
      if (that == null)
        return false;

      boolean this_present_dataSetCode = true && this.isSetDataSetCode();
      boolean that_present_dataSetCode = true && that.isSetDataSetCode();
      if (this_present_dataSetCode || that_present_dataSetCode) {
        if (!(this_present_dataSetCode && that_present_dataSetCode))
          return false;
        if (!this.dataSetCode.equals(that.dataSetCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dataSetCode = true && (isSetDataSetCode());
      list.add(present_dataSetCode);
      if (present_dataSetCode)
        list.add(dataSetCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataSetCode()).compareTo(other.isSetDataSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSetCode, other.dataSetCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSet_args(");
      boolean first = true;

      sb.append("dataSetCode:");
      if (this.dataSetCode == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSetCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSet_argsStandardSchemeFactory implements SchemeFactory {
      public getDataSet_argsStandardScheme getScheme() {
        return new getDataSet_argsStandardScheme();
      }
    }

    private static class getDataSet_argsStandardScheme extends StandardScheme<getDataSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_SET_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataSetCode = iprot.readString();
                struct.setDataSetCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataSetCode != null) {
          oprot.writeFieldBegin(DATA_SET_CODE_FIELD_DESC);
          oprot.writeString(struct.dataSetCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSet_argsTupleSchemeFactory implements SchemeFactory {
      public getDataSet_argsTupleScheme getScheme() {
        return new getDataSet_argsTupleScheme();
      }
    }

    private static class getDataSet_argsTupleScheme extends TupleScheme<getDataSet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDataSetCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDataSetCode()) {
          oprot.writeString(struct.dataSetCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dataSetCode = iprot.readString();
          struct.setDataSetCodeIsSet(true);
        }
      }
    }

  }

  public static class getDataSet_result implements org.apache.thrift.TBase<getDataSet_result, getDataSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDataSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataSet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataSet_resultTupleSchemeFactory());
    }

    public com.yihu.ehr.profile.TEhrDataSet success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.profile.TEhrDataSet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSet_result.class, metaDataMap);
    }

    public getDataSet_result() {
    }

    public getDataSet_result(
      com.yihu.ehr.profile.TEhrDataSet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSet_result(getDataSet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.yihu.ehr.profile.TEhrDataSet(other.success);
      }
    }

    public getDataSet_result deepCopy() {
      return new getDataSet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.yihu.ehr.profile.TEhrDataSet getSuccess() {
      return this.success;
    }

    public getDataSet_result setSuccess(com.yihu.ehr.profile.TEhrDataSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.yihu.ehr.profile.TEhrDataSet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSet_result)
        return this.equals((getDataSet_result)that);
      return false;
    }

    public boolean equals(getDataSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSet_resultStandardSchemeFactory implements SchemeFactory {
      public getDataSet_resultStandardScheme getScheme() {
        return new getDataSet_resultStandardScheme();
      }
    }

    private static class getDataSet_resultStandardScheme extends StandardScheme<getDataSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.yihu.ehr.profile.TEhrDataSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSet_resultTupleSchemeFactory implements SchemeFactory {
      public getDataSet_resultTupleScheme getScheme() {
        return new getDataSet_resultTupleScheme();
      }
    }

    private static class getDataSet_resultTupleScheme extends TupleScheme<getDataSet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.yihu.ehr.profile.TEhrDataSet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProfiles_args implements org.apache.thrift.TBase<getProfiles_args, getProfiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfiles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfiles_args");

    private static final org.apache.thrift.protocol.TField DEMOGRAPHIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("demographicId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("since", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField LOAD_STD_DATA_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("loadStdDataSet", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField LOAD_ORI_DATA_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("loadOriDataSet", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfiles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfiles_argsTupleSchemeFactory());
    }

    public String demographicId; // required
    public long since; // required
    public long to; // required
    public boolean loadStdDataSet; // required
    public boolean loadOriDataSet; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEMOGRAPHIC_ID((short)1, "demographicId"),
      SINCE((short)2, "since"),
      TO((short)3, "to"),
      LOAD_STD_DATA_SET((short)4, "loadStdDataSet"),
      LOAD_ORI_DATA_SET((short)5, "loadOriDataSet");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEMOGRAPHIC_ID
            return DEMOGRAPHIC_ID;
          case 2: // SINCE
            return SINCE;
          case 3: // TO
            return TO;
          case 4: // LOAD_STD_DATA_SET
            return LOAD_STD_DATA_SET;
          case 5: // LOAD_ORI_DATA_SET
            return LOAD_ORI_DATA_SET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SINCE_ISSET_ID = 0;
    private static final int __TO_ISSET_ID = 1;
    private static final int __LOADSTDDATASET_ISSET_ID = 2;
    private static final int __LOADORIDATASET_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEMOGRAPHIC_ID, new org.apache.thrift.meta_data.FieldMetaData("demographicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SINCE, new org.apache.thrift.meta_data.FieldMetaData("since", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LOAD_STD_DATA_SET, new org.apache.thrift.meta_data.FieldMetaData("loadStdDataSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LOAD_ORI_DATA_SET, new org.apache.thrift.meta_data.FieldMetaData("loadOriDataSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfiles_args.class, metaDataMap);
    }

    public getProfiles_args() {
    }

    public getProfiles_args(
      String demographicId,
      long since,
      long to,
      boolean loadStdDataSet,
      boolean loadOriDataSet)
    {
      this();
      this.demographicId = demographicId;
      this.since = since;
      setSinceIsSet(true);
      this.to = to;
      setToIsSet(true);
      this.loadStdDataSet = loadStdDataSet;
      setLoadStdDataSetIsSet(true);
      this.loadOriDataSet = loadOriDataSet;
      setLoadOriDataSetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfiles_args(getProfiles_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDemographicId()) {
        this.demographicId = other.demographicId;
      }
      this.since = other.since;
      this.to = other.to;
      this.loadStdDataSet = other.loadStdDataSet;
      this.loadOriDataSet = other.loadOriDataSet;
    }

    public getProfiles_args deepCopy() {
      return new getProfiles_args(this);
    }

    @Override
    public void clear() {
      this.demographicId = null;
      setSinceIsSet(false);
      this.since = 0;
      setToIsSet(false);
      this.to = 0;
      setLoadStdDataSetIsSet(false);
      this.loadStdDataSet = false;
      setLoadOriDataSetIsSet(false);
      this.loadOriDataSet = false;
    }

    public String getDemographicId() {
      return this.demographicId;
    }

    public getProfiles_args setDemographicId(String demographicId) {
      this.demographicId = demographicId;
      return this;
    }

    public void unsetDemographicId() {
      this.demographicId = null;
    }

    /** Returns true if field demographicId is set (has been assigned a value) and false otherwise */
    public boolean isSetDemographicId() {
      return this.demographicId != null;
    }

    public void setDemographicIdIsSet(boolean value) {
      if (!value) {
        this.demographicId = null;
      }
    }

    public long getSince() {
      return this.since;
    }

    public getProfiles_args setSince(long since) {
      this.since = since;
      setSinceIsSet(true);
      return this;
    }

    public void unsetSince() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINCE_ISSET_ID);
    }

    /** Returns true if field since is set (has been assigned a value) and false otherwise */
    public boolean isSetSince() {
      return EncodingUtils.testBit(__isset_bitfield, __SINCE_ISSET_ID);
    }

    public void setSinceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINCE_ISSET_ID, value);
    }

    public long getTo() {
      return this.to;
    }

    public getProfiles_args setTo(long to) {
      this.to = to;
      setToIsSet(true);
      return this;
    }

    public void unsetTo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TO_ISSET_ID);
    }

    /** Returns true if field to is set (has been assigned a value) and false otherwise */
    public boolean isSetTo() {
      return EncodingUtils.testBit(__isset_bitfield, __TO_ISSET_ID);
    }

    public void setToIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TO_ISSET_ID, value);
    }

    public boolean isLoadStdDataSet() {
      return this.loadStdDataSet;
    }

    public getProfiles_args setLoadStdDataSet(boolean loadStdDataSet) {
      this.loadStdDataSet = loadStdDataSet;
      setLoadStdDataSetIsSet(true);
      return this;
    }

    public void unsetLoadStdDataSet() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOADSTDDATASET_ISSET_ID);
    }

    /** Returns true if field loadStdDataSet is set (has been assigned a value) and false otherwise */
    public boolean isSetLoadStdDataSet() {
      return EncodingUtils.testBit(__isset_bitfield, __LOADSTDDATASET_ISSET_ID);
    }

    public void setLoadStdDataSetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOADSTDDATASET_ISSET_ID, value);
    }

    public boolean isLoadOriDataSet() {
      return this.loadOriDataSet;
    }

    public getProfiles_args setLoadOriDataSet(boolean loadOriDataSet) {
      this.loadOriDataSet = loadOriDataSet;
      setLoadOriDataSetIsSet(true);
      return this;
    }

    public void unsetLoadOriDataSet() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOADORIDATASET_ISSET_ID);
    }

    /** Returns true if field loadOriDataSet is set (has been assigned a value) and false otherwise */
    public boolean isSetLoadOriDataSet() {
      return EncodingUtils.testBit(__isset_bitfield, __LOADORIDATASET_ISSET_ID);
    }

    public void setLoadOriDataSetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOADORIDATASET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEMOGRAPHIC_ID:
        if (value == null) {
          unsetDemographicId();
        } else {
          setDemographicId((String)value);
        }
        break;

      case SINCE:
        if (value == null) {
          unsetSince();
        } else {
          setSince((Long)value);
        }
        break;

      case TO:
        if (value == null) {
          unsetTo();
        } else {
          setTo((Long)value);
        }
        break;

      case LOAD_STD_DATA_SET:
        if (value == null) {
          unsetLoadStdDataSet();
        } else {
          setLoadStdDataSet((Boolean)value);
        }
        break;

      case LOAD_ORI_DATA_SET:
        if (value == null) {
          unsetLoadOriDataSet();
        } else {
          setLoadOriDataSet((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEMOGRAPHIC_ID:
        return getDemographicId();

      case SINCE:
        return getSince();

      case TO:
        return getTo();

      case LOAD_STD_DATA_SET:
        return isLoadStdDataSet();

      case LOAD_ORI_DATA_SET:
        return isLoadOriDataSet();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEMOGRAPHIC_ID:
        return isSetDemographicId();
      case SINCE:
        return isSetSince();
      case TO:
        return isSetTo();
      case LOAD_STD_DATA_SET:
        return isSetLoadStdDataSet();
      case LOAD_ORI_DATA_SET:
        return isSetLoadOriDataSet();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfiles_args)
        return this.equals((getProfiles_args)that);
      return false;
    }

    public boolean equals(getProfiles_args that) {
      if (that == null)
        return false;

      boolean this_present_demographicId = true && this.isSetDemographicId();
      boolean that_present_demographicId = true && that.isSetDemographicId();
      if (this_present_demographicId || that_present_demographicId) {
        if (!(this_present_demographicId && that_present_demographicId))
          return false;
        if (!this.demographicId.equals(that.demographicId))
          return false;
      }

      boolean this_present_since = true;
      boolean that_present_since = true;
      if (this_present_since || that_present_since) {
        if (!(this_present_since && that_present_since))
          return false;
        if (this.since != that.since)
          return false;
      }

      boolean this_present_to = true;
      boolean that_present_to = true;
      if (this_present_to || that_present_to) {
        if (!(this_present_to && that_present_to))
          return false;
        if (this.to != that.to)
          return false;
      }

      boolean this_present_loadStdDataSet = true;
      boolean that_present_loadStdDataSet = true;
      if (this_present_loadStdDataSet || that_present_loadStdDataSet) {
        if (!(this_present_loadStdDataSet && that_present_loadStdDataSet))
          return false;
        if (this.loadStdDataSet != that.loadStdDataSet)
          return false;
      }

      boolean this_present_loadOriDataSet = true;
      boolean that_present_loadOriDataSet = true;
      if (this_present_loadOriDataSet || that_present_loadOriDataSet) {
        if (!(this_present_loadOriDataSet && that_present_loadOriDataSet))
          return false;
        if (this.loadOriDataSet != that.loadOriDataSet)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_demographicId = true && (isSetDemographicId());
      list.add(present_demographicId);
      if (present_demographicId)
        list.add(demographicId);

      boolean present_since = true;
      list.add(present_since);
      if (present_since)
        list.add(since);

      boolean present_to = true;
      list.add(present_to);
      if (present_to)
        list.add(to);

      boolean present_loadStdDataSet = true;
      list.add(present_loadStdDataSet);
      if (present_loadStdDataSet)
        list.add(loadStdDataSet);

      boolean present_loadOriDataSet = true;
      list.add(present_loadOriDataSet);
      if (present_loadOriDataSet)
        list.add(loadOriDataSet);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDemographicId()).compareTo(other.isSetDemographicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDemographicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.demographicId, other.demographicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSince()).compareTo(other.isSetSince());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSince()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.since, other.since);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTo()).compareTo(other.isSetTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, other.to);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoadStdDataSet()).compareTo(other.isSetLoadStdDataSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoadStdDataSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadStdDataSet, other.loadStdDataSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoadOriDataSet()).compareTo(other.isSetLoadOriDataSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoadOriDataSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadOriDataSet, other.loadOriDataSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfiles_args(");
      boolean first = true;

      sb.append("demographicId:");
      if (this.demographicId == null) {
        sb.append("null");
      } else {
        sb.append(this.demographicId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("since:");
      sb.append(this.since);
      first = false;
      if (!first) sb.append(", ");
      sb.append("to:");
      sb.append(this.to);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loadStdDataSet:");
      sb.append(this.loadStdDataSet);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loadOriDataSet:");
      sb.append(this.loadOriDataSet);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfiles_argsStandardSchemeFactory implements SchemeFactory {
      public getProfiles_argsStandardScheme getScheme() {
        return new getProfiles_argsStandardScheme();
      }
    }

    private static class getProfiles_argsStandardScheme extends StandardScheme<getProfiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEMOGRAPHIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.demographicId = iprot.readString();
                struct.setDemographicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SINCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.since = iprot.readI64();
                struct.setSinceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TO
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.to = iprot.readI64();
                struct.setToIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOAD_STD_DATA_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.loadStdDataSet = iprot.readBool();
                struct.setLoadStdDataSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LOAD_ORI_DATA_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.loadOriDataSet = iprot.readBool();
                struct.setLoadOriDataSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.demographicId != null) {
          oprot.writeFieldBegin(DEMOGRAPHIC_ID_FIELD_DESC);
          oprot.writeString(struct.demographicId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SINCE_FIELD_DESC);
        oprot.writeI64(struct.since);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeI64(struct.to);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOAD_STD_DATA_SET_FIELD_DESC);
        oprot.writeBool(struct.loadStdDataSet);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOAD_ORI_DATA_SET_FIELD_DESC);
        oprot.writeBool(struct.loadOriDataSet);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfiles_argsTupleSchemeFactory implements SchemeFactory {
      public getProfiles_argsTupleScheme getScheme() {
        return new getProfiles_argsTupleScheme();
      }
    }

    private static class getProfiles_argsTupleScheme extends TupleScheme<getProfiles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDemographicId()) {
          optionals.set(0);
        }
        if (struct.isSetSince()) {
          optionals.set(1);
        }
        if (struct.isSetTo()) {
          optionals.set(2);
        }
        if (struct.isSetLoadStdDataSet()) {
          optionals.set(3);
        }
        if (struct.isSetLoadOriDataSet()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDemographicId()) {
          oprot.writeString(struct.demographicId);
        }
        if (struct.isSetSince()) {
          oprot.writeI64(struct.since);
        }
        if (struct.isSetTo()) {
          oprot.writeI64(struct.to);
        }
        if (struct.isSetLoadStdDataSet()) {
          oprot.writeBool(struct.loadStdDataSet);
        }
        if (struct.isSetLoadOriDataSet()) {
          oprot.writeBool(struct.loadOriDataSet);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.demographicId = iprot.readString();
          struct.setDemographicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.since = iprot.readI64();
          struct.setSinceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.to = iprot.readI64();
          struct.setToIsSet(true);
        }
        if (incoming.get(3)) {
          struct.loadStdDataSet = iprot.readBool();
          struct.setLoadStdDataSetIsSet(true);
        }
        if (incoming.get(4)) {
          struct.loadOriDataSet = iprot.readBool();
          struct.setLoadOriDataSetIsSet(true);
        }
      }
    }

  }

  public static class getProfiles_result implements org.apache.thrift.TBase<getProfiles_result, getProfiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfiles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfiles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfiles_resultTupleSchemeFactory());
    }

    public List<com.yihu.ehr.profile.TEhrProfile> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.profile.TEhrProfile.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfiles_result.class, metaDataMap);
    }

    public getProfiles_result() {
    }

    public getProfiles_result(
      List<com.yihu.ehr.profile.TEhrProfile> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfiles_result(getProfiles_result other) {
      if (other.isSetSuccess()) {
        List<com.yihu.ehr.profile.TEhrProfile> __this__success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>(other.success.size());
        for (com.yihu.ehr.profile.TEhrProfile other_element : other.success) {
          __this__success.add(new com.yihu.ehr.profile.TEhrProfile(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProfiles_result deepCopy() {
      return new getProfiles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.yihu.ehr.profile.TEhrProfile> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.yihu.ehr.profile.TEhrProfile elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>();
      }
      this.success.add(elem);
    }

    public List<com.yihu.ehr.profile.TEhrProfile> getSuccess() {
      return this.success;
    }

    public getProfiles_result setSuccess(List<com.yihu.ehr.profile.TEhrProfile> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.yihu.ehr.profile.TEhrProfile>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfiles_result)
        return this.equals((getProfiles_result)that);
      return false;
    }

    public boolean equals(getProfiles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfiles_resultStandardSchemeFactory implements SchemeFactory {
      public getProfiles_resultStandardScheme getScheme() {
        return new getProfiles_resultStandardScheme();
      }
    }

    private static class getProfiles_resultStandardScheme extends StandardScheme<getProfiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>(_list0.size);
                  com.yihu.ehr.profile.TEhrProfile _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.yihu.ehr.profile.TEhrProfile();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.yihu.ehr.profile.TEhrProfile _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfiles_resultTupleSchemeFactory implements SchemeFactory {
      public getProfiles_resultTupleScheme getScheme() {
        return new getProfiles_resultTupleScheme();
      }
    }

    private static class getProfiles_resultTupleScheme extends TupleScheme<getProfiles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.yihu.ehr.profile.TEhrProfile _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>(_list5.size);
            com.yihu.ehr.profile.TEhrProfile _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.yihu.ehr.profile.TEhrProfile();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchProfiles_args implements org.apache.thrift.TBase<searchProfiles_args, searchProfiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchProfiles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchProfiles_args");

    private static final org.apache.thrift.protocol.TField CRITERIA_FIELD_DESC = new org.apache.thrift.protocol.TField("criteria", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchProfiles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchProfiles_argsTupleSchemeFactory());
    }

    public Map<String,String> criteria; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRITERIA((short)1, "criteria");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRITERIA
            return CRITERIA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRITERIA, new org.apache.thrift.meta_data.FieldMetaData("criteria", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchProfiles_args.class, metaDataMap);
    }

    public searchProfiles_args() {
    }

    public searchProfiles_args(
      Map<String,String> criteria)
    {
      this();
      this.criteria = criteria;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchProfiles_args(searchProfiles_args other) {
      if (other.isSetCriteria()) {
        Map<String,String> __this__criteria = new HashMap<String,String>(other.criteria);
        this.criteria = __this__criteria;
      }
    }

    public searchProfiles_args deepCopy() {
      return new searchProfiles_args(this);
    }

    @Override
    public void clear() {
      this.criteria = null;
    }

    public int getCriteriaSize() {
      return (this.criteria == null) ? 0 : this.criteria.size();
    }

    public void putToCriteria(String key, String val) {
      if (this.criteria == null) {
        this.criteria = new HashMap<String,String>();
      }
      this.criteria.put(key, val);
    }

    public Map<String,String> getCriteria() {
      return this.criteria;
    }

    public searchProfiles_args setCriteria(Map<String,String> criteria) {
      this.criteria = criteria;
      return this;
    }

    public void unsetCriteria() {
      this.criteria = null;
    }

    /** Returns true if field criteria is set (has been assigned a value) and false otherwise */
    public boolean isSetCriteria() {
      return this.criteria != null;
    }

    public void setCriteriaIsSet(boolean value) {
      if (!value) {
        this.criteria = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRITERIA:
        if (value == null) {
          unsetCriteria();
        } else {
          setCriteria((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRITERIA:
        return getCriteria();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRITERIA:
        return isSetCriteria();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchProfiles_args)
        return this.equals((searchProfiles_args)that);
      return false;
    }

    public boolean equals(searchProfiles_args that) {
      if (that == null)
        return false;

      boolean this_present_criteria = true && this.isSetCriteria();
      boolean that_present_criteria = true && that.isSetCriteria();
      if (this_present_criteria || that_present_criteria) {
        if (!(this_present_criteria && that_present_criteria))
          return false;
        if (!this.criteria.equals(that.criteria))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_criteria = true && (isSetCriteria());
      list.add(present_criteria);
      if (present_criteria)
        list.add(criteria);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchProfiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCriteria()).compareTo(other.isSetCriteria());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCriteria()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.criteria, other.criteria);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchProfiles_args(");
      boolean first = true;

      sb.append("criteria:");
      if (this.criteria == null) {
        sb.append("null");
      } else {
        sb.append(this.criteria);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchProfiles_argsStandardSchemeFactory implements SchemeFactory {
      public searchProfiles_argsStandardScheme getScheme() {
        return new searchProfiles_argsStandardScheme();
      }
    }

    private static class searchProfiles_argsStandardScheme extends StandardScheme<searchProfiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchProfiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRITERIA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.criteria = new HashMap<String,String>(2*_map8.size);
                  String _key9;
                  String _val10;
                  for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                  {
                    _key9 = iprot.readString();
                    _val10 = iprot.readString();
                    struct.criteria.put(_key9, _val10);
                  }
                  iprot.readMapEnd();
                }
                struct.setCriteriaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchProfiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.criteria != null) {
          oprot.writeFieldBegin(CRITERIA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.criteria.size()));
            for (Map.Entry<String, String> _iter12 : struct.criteria.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeString(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchProfiles_argsTupleSchemeFactory implements SchemeFactory {
      public searchProfiles_argsTupleScheme getScheme() {
        return new searchProfiles_argsTupleScheme();
      }
    }

    private static class searchProfiles_argsTupleScheme extends TupleScheme<searchProfiles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchProfiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCriteria()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCriteria()) {
          {
            oprot.writeI32(struct.criteria.size());
            for (Map.Entry<String, String> _iter13 : struct.criteria.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              oprot.writeString(_iter13.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchProfiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.criteria = new HashMap<String,String>(2*_map14.size);
            String _key15;
            String _val16;
            for (int _i17 = 0; _i17 < _map14.size; ++_i17)
            {
              _key15 = iprot.readString();
              _val16 = iprot.readString();
              struct.criteria.put(_key15, _val16);
            }
          }
          struct.setCriteriaIsSet(true);
        }
      }
    }

  }

  public static class searchProfiles_result implements org.apache.thrift.TBase<searchProfiles_result, searchProfiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchProfiles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchProfiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchProfiles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchProfiles_resultTupleSchemeFactory());
    }

    public List<com.yihu.ehr.profile.TEhrProfile> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.profile.TEhrProfile.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchProfiles_result.class, metaDataMap);
    }

    public searchProfiles_result() {
    }

    public searchProfiles_result(
      List<com.yihu.ehr.profile.TEhrProfile> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchProfiles_result(searchProfiles_result other) {
      if (other.isSetSuccess()) {
        List<com.yihu.ehr.profile.TEhrProfile> __this__success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>(other.success.size());
        for (com.yihu.ehr.profile.TEhrProfile other_element : other.success) {
          __this__success.add(new com.yihu.ehr.profile.TEhrProfile(other_element));
        }
        this.success = __this__success;
      }
    }

    public searchProfiles_result deepCopy() {
      return new searchProfiles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.yihu.ehr.profile.TEhrProfile> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.yihu.ehr.profile.TEhrProfile elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>();
      }
      this.success.add(elem);
    }

    public List<com.yihu.ehr.profile.TEhrProfile> getSuccess() {
      return this.success;
    }

    public searchProfiles_result setSuccess(List<com.yihu.ehr.profile.TEhrProfile> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.yihu.ehr.profile.TEhrProfile>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchProfiles_result)
        return this.equals((searchProfiles_result)that);
      return false;
    }

    public boolean equals(searchProfiles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchProfiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchProfiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchProfiles_resultStandardSchemeFactory implements SchemeFactory {
      public searchProfiles_resultStandardScheme getScheme() {
        return new searchProfiles_resultStandardScheme();
      }
    }

    private static class searchProfiles_resultStandardScheme extends StandardScheme<searchProfiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchProfiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>(_list18.size);
                  com.yihu.ehr.profile.TEhrProfile _elem19;
                  for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                  {
                    _elem19 = new com.yihu.ehr.profile.TEhrProfile();
                    _elem19.read(iprot);
                    struct.success.add(_elem19);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchProfiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.yihu.ehr.profile.TEhrProfile _iter21 : struct.success)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchProfiles_resultTupleSchemeFactory implements SchemeFactory {
      public searchProfiles_resultTupleScheme getScheme() {
        return new searchProfiles_resultTupleScheme();
      }
    }

    private static class searchProfiles_resultTupleScheme extends TupleScheme<searchProfiles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchProfiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.yihu.ehr.profile.TEhrProfile _iter22 : struct.success)
            {
              _iter22.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchProfiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>(_list23.size);
            com.yihu.ehr.profile.TEhrProfile _elem24;
            for (int _i25 = 0; _i25 < _list23.size; ++_i25)
            {
              _elem24 = new com.yihu.ehr.profile.TEhrProfile();
              _elem24.read(iprot);
              struct.success.add(_elem24);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
