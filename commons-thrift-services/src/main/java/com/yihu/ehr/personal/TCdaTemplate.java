/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yihu.ehr.personal;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-29")
public class TCdaTemplate implements org.apache.thrift.TBase<TCdaTemplate, TCdaTemplate._Fields>, java.io.Serializable, Cloneable, Comparable<TCdaTemplate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCdaTemplate");

  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CDA_VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cdaVersionId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CDA_DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cdaDocumentId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCdaTemplateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCdaTemplateTupleSchemeFactory());
  }

  public String orgCode; // required
  public String cdaVersionId; // required
  public String cdaDocumentId; // required
  public String name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORG_CODE((short)1, "orgCode"),
    CDA_VERSION_ID((short)2, "cdaVersionId"),
    CDA_DOCUMENT_ID((short)3, "cdaDocumentId"),
    NAME((short)4, "name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORG_CODE
          return ORG_CODE;
        case 2: // CDA_VERSION_ID
          return CDA_VERSION_ID;
        case 3: // CDA_DOCUMENT_ID
          return CDA_DOCUMENT_ID;
        case 4: // NAME
          return NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CDA_VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("cdaVersionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CDA_DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("cdaDocumentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCdaTemplate.class, metaDataMap);
  }

  public TCdaTemplate() {
  }

  public TCdaTemplate(
    String orgCode,
    String cdaVersionId,
    String cdaDocumentId,
    String name)
  {
    this();
    this.orgCode = orgCode;
    this.cdaVersionId = cdaVersionId;
    this.cdaDocumentId = cdaDocumentId;
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCdaTemplate(TCdaTemplate other) {
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetCdaVersionId()) {
      this.cdaVersionId = other.cdaVersionId;
    }
    if (other.isSetCdaDocumentId()) {
      this.cdaDocumentId = other.cdaDocumentId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
  }

  public TCdaTemplate deepCopy() {
    return new TCdaTemplate(this);
  }

  @Override
  public void clear() {
    this.orgCode = null;
    this.cdaVersionId = null;
    this.cdaDocumentId = null;
    this.name = null;
  }

  public String getOrgCode() {
    return this.orgCode;
  }

  public TCdaTemplate setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  public String getCdaVersionId() {
    return this.cdaVersionId;
  }

  public TCdaTemplate setCdaVersionId(String cdaVersionId) {
    this.cdaVersionId = cdaVersionId;
    return this;
  }

  public void unsetCdaVersionId() {
    this.cdaVersionId = null;
  }

  /** Returns true if field cdaVersionId is set (has been assigned a value) and false otherwise */
  public boolean isSetCdaVersionId() {
    return this.cdaVersionId != null;
  }

  public void setCdaVersionIdIsSet(boolean value) {
    if (!value) {
      this.cdaVersionId = null;
    }
  }

  public String getCdaDocumentId() {
    return this.cdaDocumentId;
  }

  public TCdaTemplate setCdaDocumentId(String cdaDocumentId) {
    this.cdaDocumentId = cdaDocumentId;
    return this;
  }

  public void unsetCdaDocumentId() {
    this.cdaDocumentId = null;
  }

  /** Returns true if field cdaDocumentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCdaDocumentId() {
    return this.cdaDocumentId != null;
  }

  public void setCdaDocumentIdIsSet(boolean value) {
    if (!value) {
      this.cdaDocumentId = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TCdaTemplate setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case CDA_VERSION_ID:
      if (value == null) {
        unsetCdaVersionId();
      } else {
        setCdaVersionId((String)value);
      }
      break;

    case CDA_DOCUMENT_ID:
      if (value == null) {
        unsetCdaDocumentId();
      } else {
        setCdaDocumentId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORG_CODE:
      return getOrgCode();

    case CDA_VERSION_ID:
      return getCdaVersionId();

    case CDA_DOCUMENT_ID:
      return getCdaDocumentId();

    case NAME:
      return getName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORG_CODE:
      return isSetOrgCode();
    case CDA_VERSION_ID:
      return isSetCdaVersionId();
    case CDA_DOCUMENT_ID:
      return isSetCdaDocumentId();
    case NAME:
      return isSetName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCdaTemplate)
      return this.equals((TCdaTemplate)that);
    return false;
  }

  public boolean equals(TCdaTemplate that) {
    if (that == null)
      return false;

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_cdaVersionId = true && this.isSetCdaVersionId();
    boolean that_present_cdaVersionId = true && that.isSetCdaVersionId();
    if (this_present_cdaVersionId || that_present_cdaVersionId) {
      if (!(this_present_cdaVersionId && that_present_cdaVersionId))
        return false;
      if (!this.cdaVersionId.equals(that.cdaVersionId))
        return false;
    }

    boolean this_present_cdaDocumentId = true && this.isSetCdaDocumentId();
    boolean that_present_cdaDocumentId = true && that.isSetCdaDocumentId();
    if (this_present_cdaDocumentId || that_present_cdaDocumentId) {
      if (!(this_present_cdaDocumentId && that_present_cdaDocumentId))
        return false;
      if (!this.cdaDocumentId.equals(that.cdaDocumentId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_cdaVersionId = true && (isSetCdaVersionId());
    list.add(present_cdaVersionId);
    if (present_cdaVersionId)
      list.add(cdaVersionId);

    boolean present_cdaDocumentId = true && (isSetCdaDocumentId());
    list.add(present_cdaDocumentId);
    if (present_cdaDocumentId)
      list.add(cdaDocumentId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCdaTemplate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCdaVersionId()).compareTo(other.isSetCdaVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCdaVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdaVersionId, other.cdaVersionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCdaDocumentId()).compareTo(other.isSetCdaDocumentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCdaDocumentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdaDocumentId, other.cdaDocumentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCdaTemplate(");
    boolean first = true;

    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cdaVersionId:");
    if (this.cdaVersionId == null) {
      sb.append("null");
    } else {
      sb.append(this.cdaVersionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cdaDocumentId:");
    if (this.cdaDocumentId == null) {
      sb.append("null");
    } else {
      sb.append(this.cdaDocumentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCdaTemplateStandardSchemeFactory implements SchemeFactory {
    public TCdaTemplateStandardScheme getScheme() {
      return new TCdaTemplateStandardScheme();
    }
  }

  private static class TCdaTemplateStandardScheme extends StandardScheme<TCdaTemplate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCdaTemplate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CDA_VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cdaVersionId = iprot.readString();
              struct.setCdaVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CDA_DOCUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cdaDocumentId = iprot.readString();
              struct.setCdaDocumentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCdaTemplate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.cdaVersionId != null) {
        oprot.writeFieldBegin(CDA_VERSION_ID_FIELD_DESC);
        oprot.writeString(struct.cdaVersionId);
        oprot.writeFieldEnd();
      }
      if (struct.cdaDocumentId != null) {
        oprot.writeFieldBegin(CDA_DOCUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.cdaDocumentId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCdaTemplateTupleSchemeFactory implements SchemeFactory {
    public TCdaTemplateTupleScheme getScheme() {
      return new TCdaTemplateTupleScheme();
    }
  }

  private static class TCdaTemplateTupleScheme extends TupleScheme<TCdaTemplate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCdaTemplate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrgCode()) {
        optionals.set(0);
      }
      if (struct.isSetCdaVersionId()) {
        optionals.set(1);
      }
      if (struct.isSetCdaDocumentId()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetCdaVersionId()) {
        oprot.writeString(struct.cdaVersionId);
      }
      if (struct.isSetCdaDocumentId()) {
        oprot.writeString(struct.cdaDocumentId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCdaTemplate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cdaVersionId = iprot.readString();
        struct.setCdaVersionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cdaDocumentId = iprot.readString();
        struct.setCdaDocumentIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }
  }

}

