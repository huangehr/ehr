/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yihu.ehr.personal;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-29")
public class TPersonalProfileService {

  public interface Iface {

    public List<com.yihu.ehr.profile.TEhrProfile> getProfiles(String demographicId, long since, long to) throws org.apache.thrift.TException;

    public com.yihu.ehr.profile.TEhrProfile loadDocumentByDataSet(String cdaVersion, List<com.yihu.ehr.profile.TEhrDataSet> dataSets, boolean originData) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getProfiles(String demographicId, long since, long to, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadDocumentByDataSet(String cdaVersion, List<com.yihu.ehr.profile.TEhrDataSet> dataSets, boolean originData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.yihu.ehr.profile.TEhrProfile> getProfiles(String demographicId, long since, long to) throws org.apache.thrift.TException
    {
      send_getProfiles(demographicId, since, to);
      return recv_getProfiles();
    }

    public void send_getProfiles(String demographicId, long since, long to) throws org.apache.thrift.TException
    {
      getProfiles_args args = new getProfiles_args();
      args.setDemographicId(demographicId);
      args.setSince(since);
      args.setTo(to);
      sendBase("getProfiles", args);
    }

    public List<com.yihu.ehr.profile.TEhrProfile> recv_getProfiles() throws org.apache.thrift.TException
    {
      getProfiles_result result = new getProfiles_result();
      receiveBase(result, "getProfiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfiles failed: unknown result");
    }

    public com.yihu.ehr.profile.TEhrProfile loadDocumentByDataSet(String cdaVersion, List<com.yihu.ehr.profile.TEhrDataSet> dataSets, boolean originData) throws org.apache.thrift.TException
    {
      send_loadDocumentByDataSet(cdaVersion, dataSets, originData);
      return recv_loadDocumentByDataSet();
    }

    public void send_loadDocumentByDataSet(String cdaVersion, List<com.yihu.ehr.profile.TEhrDataSet> dataSets, boolean originData) throws org.apache.thrift.TException
    {
      loadDocumentByDataSet_args args = new loadDocumentByDataSet_args();
      args.setCdaVersion(cdaVersion);
      args.setDataSets(dataSets);
      args.setOriginData(originData);
      sendBase("loadDocumentByDataSet", args);
    }

    public com.yihu.ehr.profile.TEhrProfile recv_loadDocumentByDataSet() throws org.apache.thrift.TException
    {
      loadDocumentByDataSet_result result = new loadDocumentByDataSet_result();
      receiveBase(result, "loadDocumentByDataSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadDocumentByDataSet failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getProfiles(String demographicId, long since, long to, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfiles_call method_call = new getProfiles_call(demographicId, since, to, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfiles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String demographicId;
      private long since;
      private long to;
      public getProfiles_call(String demographicId, long since, long to, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.demographicId = demographicId;
        this.since = since;
        this.to = to;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfiles_args args = new getProfiles_args();
        args.setDemographicId(demographicId);
        args.setSince(since);
        args.setTo(to);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.yihu.ehr.profile.TEhrProfile> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfiles();
      }
    }

    public void loadDocumentByDataSet(String cdaVersion, List<com.yihu.ehr.profile.TEhrDataSet> dataSets, boolean originData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadDocumentByDataSet_call method_call = new loadDocumentByDataSet_call(cdaVersion, dataSets, originData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadDocumentByDataSet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cdaVersion;
      private List<com.yihu.ehr.profile.TEhrDataSet> dataSets;
      private boolean originData;
      public loadDocumentByDataSet_call(String cdaVersion, List<com.yihu.ehr.profile.TEhrDataSet> dataSets, boolean originData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cdaVersion = cdaVersion;
        this.dataSets = dataSets;
        this.originData = originData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadDocumentByDataSet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadDocumentByDataSet_args args = new loadDocumentByDataSet_args();
        args.setCdaVersion(cdaVersion);
        args.setDataSets(dataSets);
        args.setOriginData(originData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.yihu.ehr.profile.TEhrProfile getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadDocumentByDataSet();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getProfiles", new getProfiles());
      processMap.put("loadDocumentByDataSet", new loadDocumentByDataSet());
      return processMap;
    }

    public static class getProfiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfiles_args> {
      public getProfiles() {
        super("getProfiles");
      }

      public getProfiles_args getEmptyArgsInstance() {
        return new getProfiles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfiles_result getResult(I iface, getProfiles_args args) throws org.apache.thrift.TException {
        getProfiles_result result = new getProfiles_result();
        result.success = iface.getProfiles(args.demographicId, args.since, args.to);
        return result;
      }
    }

    public static class loadDocumentByDataSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadDocumentByDataSet_args> {
      public loadDocumentByDataSet() {
        super("loadDocumentByDataSet");
      }

      public loadDocumentByDataSet_args getEmptyArgsInstance() {
        return new loadDocumentByDataSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadDocumentByDataSet_result getResult(I iface, loadDocumentByDataSet_args args) throws org.apache.thrift.TException {
        loadDocumentByDataSet_result result = new loadDocumentByDataSet_result();
        result.success = iface.loadDocumentByDataSet(args.cdaVersion, args.dataSets, args.originData);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getProfiles", new getProfiles());
      processMap.put("loadDocumentByDataSet", new loadDocumentByDataSet());
      return processMap;
    }

    public static class getProfiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfiles_args, List<com.yihu.ehr.profile.TEhrProfile>> {
      public getProfiles() {
        super("getProfiles");
      }

      public getProfiles_args getEmptyArgsInstance() {
        return new getProfiles_args();
      }

      public AsyncMethodCallback<List<com.yihu.ehr.profile.TEhrProfile>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.yihu.ehr.profile.TEhrProfile>>() { 
          public void onComplete(List<com.yihu.ehr.profile.TEhrProfile> o) {
            getProfiles_result result = new getProfiles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfiles_result result = new getProfiles_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfiles_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.yihu.ehr.profile.TEhrProfile>> resultHandler) throws TException {
        iface.getProfiles(args.demographicId, args.since, args.to,resultHandler);
      }
    }

    public static class loadDocumentByDataSet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadDocumentByDataSet_args, com.yihu.ehr.profile.TEhrProfile> {
      public loadDocumentByDataSet() {
        super("loadDocumentByDataSet");
      }

      public loadDocumentByDataSet_args getEmptyArgsInstance() {
        return new loadDocumentByDataSet_args();
      }

      public AsyncMethodCallback<com.yihu.ehr.profile.TEhrProfile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.yihu.ehr.profile.TEhrProfile>() { 
          public void onComplete(com.yihu.ehr.profile.TEhrProfile o) {
            loadDocumentByDataSet_result result = new loadDocumentByDataSet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadDocumentByDataSet_result result = new loadDocumentByDataSet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadDocumentByDataSet_args args, org.apache.thrift.async.AsyncMethodCallback<com.yihu.ehr.profile.TEhrProfile> resultHandler) throws TException {
        iface.loadDocumentByDataSet(args.cdaVersion, args.dataSets, args.originData,resultHandler);
      }
    }

  }

  public static class getProfiles_args implements org.apache.thrift.TBase<getProfiles_args, getProfiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfiles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfiles_args");

    private static final org.apache.thrift.protocol.TField DEMOGRAPHIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("demographicId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("since", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfiles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfiles_argsTupleSchemeFactory());
    }

    public String demographicId; // required
    public long since; // required
    public long to; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEMOGRAPHIC_ID((short)1, "demographicId"),
      SINCE((short)2, "since"),
      TO((short)3, "to");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEMOGRAPHIC_ID
            return DEMOGRAPHIC_ID;
          case 2: // SINCE
            return SINCE;
          case 3: // TO
            return TO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SINCE_ISSET_ID = 0;
    private static final int __TO_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEMOGRAPHIC_ID, new org.apache.thrift.meta_data.FieldMetaData("demographicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SINCE, new org.apache.thrift.meta_data.FieldMetaData("since", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfiles_args.class, metaDataMap);
    }

    public getProfiles_args() {
    }

    public getProfiles_args(
      String demographicId,
      long since,
      long to)
    {
      this();
      this.demographicId = demographicId;
      this.since = since;
      setSinceIsSet(true);
      this.to = to;
      setToIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfiles_args(getProfiles_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDemographicId()) {
        this.demographicId = other.demographicId;
      }
      this.since = other.since;
      this.to = other.to;
    }

    public getProfiles_args deepCopy() {
      return new getProfiles_args(this);
    }

    @Override
    public void clear() {
      this.demographicId = null;
      setSinceIsSet(false);
      this.since = 0;
      setToIsSet(false);
      this.to = 0;
    }

    public String getDemographicId() {
      return this.demographicId;
    }

    public getProfiles_args setDemographicId(String demographicId) {
      this.demographicId = demographicId;
      return this;
    }

    public void unsetDemographicId() {
      this.demographicId = null;
    }

    /** Returns true if field demographicId is set (has been assigned a value) and false otherwise */
    public boolean isSetDemographicId() {
      return this.demographicId != null;
    }

    public void setDemographicIdIsSet(boolean value) {
      if (!value) {
        this.demographicId = null;
      }
    }

    public long getSince() {
      return this.since;
    }

    public getProfiles_args setSince(long since) {
      this.since = since;
      setSinceIsSet(true);
      return this;
    }

    public void unsetSince() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINCE_ISSET_ID);
    }

    /** Returns true if field since is set (has been assigned a value) and false otherwise */
    public boolean isSetSince() {
      return EncodingUtils.testBit(__isset_bitfield, __SINCE_ISSET_ID);
    }

    public void setSinceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINCE_ISSET_ID, value);
    }

    public long getTo() {
      return this.to;
    }

    public getProfiles_args setTo(long to) {
      this.to = to;
      setToIsSet(true);
      return this;
    }

    public void unsetTo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TO_ISSET_ID);
    }

    /** Returns true if field to is set (has been assigned a value) and false otherwise */
    public boolean isSetTo() {
      return EncodingUtils.testBit(__isset_bitfield, __TO_ISSET_ID);
    }

    public void setToIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEMOGRAPHIC_ID:
        if (value == null) {
          unsetDemographicId();
        } else {
          setDemographicId((String)value);
        }
        break;

      case SINCE:
        if (value == null) {
          unsetSince();
        } else {
          setSince((Long)value);
        }
        break;

      case TO:
        if (value == null) {
          unsetTo();
        } else {
          setTo((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEMOGRAPHIC_ID:
        return getDemographicId();

      case SINCE:
        return getSince();

      case TO:
        return getTo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEMOGRAPHIC_ID:
        return isSetDemographicId();
      case SINCE:
        return isSetSince();
      case TO:
        return isSetTo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfiles_args)
        return this.equals((getProfiles_args)that);
      return false;
    }

    public boolean equals(getProfiles_args that) {
      if (that == null)
        return false;

      boolean this_present_demographicId = true && this.isSetDemographicId();
      boolean that_present_demographicId = true && that.isSetDemographicId();
      if (this_present_demographicId || that_present_demographicId) {
        if (!(this_present_demographicId && that_present_demographicId))
          return false;
        if (!this.demographicId.equals(that.demographicId))
          return false;
      }

      boolean this_present_since = true;
      boolean that_present_since = true;
      if (this_present_since || that_present_since) {
        if (!(this_present_since && that_present_since))
          return false;
        if (this.since != that.since)
          return false;
      }

      boolean this_present_to = true;
      boolean that_present_to = true;
      if (this_present_to || that_present_to) {
        if (!(this_present_to && that_present_to))
          return false;
        if (this.to != that.to)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_demographicId = true && (isSetDemographicId());
      list.add(present_demographicId);
      if (present_demographicId)
        list.add(demographicId);

      boolean present_since = true;
      list.add(present_since);
      if (present_since)
        list.add(since);

      boolean present_to = true;
      list.add(present_to);
      if (present_to)
        list.add(to);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDemographicId()).compareTo(other.isSetDemographicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDemographicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.demographicId, other.demographicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSince()).compareTo(other.isSetSince());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSince()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.since, other.since);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTo()).compareTo(other.isSetTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, other.to);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfiles_args(");
      boolean first = true;

      sb.append("demographicId:");
      if (this.demographicId == null) {
        sb.append("null");
      } else {
        sb.append(this.demographicId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("since:");
      sb.append(this.since);
      first = false;
      if (!first) sb.append(", ");
      sb.append("to:");
      sb.append(this.to);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfiles_argsStandardSchemeFactory implements SchemeFactory {
      public getProfiles_argsStandardScheme getScheme() {
        return new getProfiles_argsStandardScheme();
      }
    }

    private static class getProfiles_argsStandardScheme extends StandardScheme<getProfiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEMOGRAPHIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.demographicId = iprot.readString();
                struct.setDemographicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SINCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.since = iprot.readI64();
                struct.setSinceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TO
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.to = iprot.readI64();
                struct.setToIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.demographicId != null) {
          oprot.writeFieldBegin(DEMOGRAPHIC_ID_FIELD_DESC);
          oprot.writeString(struct.demographicId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SINCE_FIELD_DESC);
        oprot.writeI64(struct.since);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeI64(struct.to);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfiles_argsTupleSchemeFactory implements SchemeFactory {
      public getProfiles_argsTupleScheme getScheme() {
        return new getProfiles_argsTupleScheme();
      }
    }

    private static class getProfiles_argsTupleScheme extends TupleScheme<getProfiles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDemographicId()) {
          optionals.set(0);
        }
        if (struct.isSetSince()) {
          optionals.set(1);
        }
        if (struct.isSetTo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDemographicId()) {
          oprot.writeString(struct.demographicId);
        }
        if (struct.isSetSince()) {
          oprot.writeI64(struct.since);
        }
        if (struct.isSetTo()) {
          oprot.writeI64(struct.to);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.demographicId = iprot.readString();
          struct.setDemographicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.since = iprot.readI64();
          struct.setSinceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.to = iprot.readI64();
          struct.setToIsSet(true);
        }
      }
    }

  }

  public static class getProfiles_result implements org.apache.thrift.TBase<getProfiles_result, getProfiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfiles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfiles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfiles_resultTupleSchemeFactory());
    }

    public List<com.yihu.ehr.profile.TEhrProfile> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.profile.TEhrProfile.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfiles_result.class, metaDataMap);
    }

    public getProfiles_result() {
    }

    public getProfiles_result(
      List<com.yihu.ehr.profile.TEhrProfile> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfiles_result(getProfiles_result other) {
      if (other.isSetSuccess()) {
        List<com.yihu.ehr.profile.TEhrProfile> __this__success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>(other.success.size());
        for (com.yihu.ehr.profile.TEhrProfile other_element : other.success) {
          __this__success.add(new com.yihu.ehr.profile.TEhrProfile(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProfiles_result deepCopy() {
      return new getProfiles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.yihu.ehr.profile.TEhrProfile> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.yihu.ehr.profile.TEhrProfile elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>();
      }
      this.success.add(elem);
    }

    public List<com.yihu.ehr.profile.TEhrProfile> getSuccess() {
      return this.success;
    }

    public getProfiles_result setSuccess(List<com.yihu.ehr.profile.TEhrProfile> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.yihu.ehr.profile.TEhrProfile>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfiles_result)
        return this.equals((getProfiles_result)that);
      return false;
    }

    public boolean equals(getProfiles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfiles_resultStandardSchemeFactory implements SchemeFactory {
      public getProfiles_resultStandardScheme getScheme() {
        return new getProfiles_resultStandardScheme();
      }
    }

    private static class getProfiles_resultStandardScheme extends StandardScheme<getProfiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>(_list0.size);
                  com.yihu.ehr.profile.TEhrProfile _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.yihu.ehr.profile.TEhrProfile();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.yihu.ehr.profile.TEhrProfile _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfiles_resultTupleSchemeFactory implements SchemeFactory {
      public getProfiles_resultTupleScheme getScheme() {
        return new getProfiles_resultTupleScheme();
      }
    }

    private static class getProfiles_resultTupleScheme extends TupleScheme<getProfiles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.yihu.ehr.profile.TEhrProfile _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.yihu.ehr.profile.TEhrProfile>(_list5.size);
            com.yihu.ehr.profile.TEhrProfile _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.yihu.ehr.profile.TEhrProfile();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadDocumentByDataSet_args implements org.apache.thrift.TBase<loadDocumentByDataSet_args, loadDocumentByDataSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadDocumentByDataSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadDocumentByDataSet_args");

    private static final org.apache.thrift.protocol.TField CDA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("cdaVersion", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_SETS_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSets", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ORIGIN_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("originData", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadDocumentByDataSet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadDocumentByDataSet_argsTupleSchemeFactory());
    }

    public String cdaVersion; // required
    public List<com.yihu.ehr.profile.TEhrDataSet> dataSets; // required
    public boolean originData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CDA_VERSION((short)1, "cdaVersion"),
      DATA_SETS((short)2, "dataSets"),
      ORIGIN_DATA((short)3, "originData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CDA_VERSION
            return CDA_VERSION;
          case 2: // DATA_SETS
            return DATA_SETS;
          case 3: // ORIGIN_DATA
            return ORIGIN_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORIGINDATA_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CDA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("cdaVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_SETS, new org.apache.thrift.meta_data.FieldMetaData("dataSets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.profile.TEhrDataSet.class))));
      tmpMap.put(_Fields.ORIGIN_DATA, new org.apache.thrift.meta_data.FieldMetaData("originData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadDocumentByDataSet_args.class, metaDataMap);
    }

    public loadDocumentByDataSet_args() {
    }

    public loadDocumentByDataSet_args(
      String cdaVersion,
      List<com.yihu.ehr.profile.TEhrDataSet> dataSets,
      boolean originData)
    {
      this();
      this.cdaVersion = cdaVersion;
      this.dataSets = dataSets;
      this.originData = originData;
      setOriginDataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadDocumentByDataSet_args(loadDocumentByDataSet_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCdaVersion()) {
        this.cdaVersion = other.cdaVersion;
      }
      if (other.isSetDataSets()) {
        List<com.yihu.ehr.profile.TEhrDataSet> __this__dataSets = new ArrayList<com.yihu.ehr.profile.TEhrDataSet>(other.dataSets.size());
        for (com.yihu.ehr.profile.TEhrDataSet other_element : other.dataSets) {
          __this__dataSets.add(new com.yihu.ehr.profile.TEhrDataSet(other_element));
        }
        this.dataSets = __this__dataSets;
      }
      this.originData = other.originData;
    }

    public loadDocumentByDataSet_args deepCopy() {
      return new loadDocumentByDataSet_args(this);
    }

    @Override
    public void clear() {
      this.cdaVersion = null;
      this.dataSets = null;
      setOriginDataIsSet(false);
      this.originData = false;
    }

    public String getCdaVersion() {
      return this.cdaVersion;
    }

    public loadDocumentByDataSet_args setCdaVersion(String cdaVersion) {
      this.cdaVersion = cdaVersion;
      return this;
    }

    public void unsetCdaVersion() {
      this.cdaVersion = null;
    }

    /** Returns true if field cdaVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetCdaVersion() {
      return this.cdaVersion != null;
    }

    public void setCdaVersionIsSet(boolean value) {
      if (!value) {
        this.cdaVersion = null;
      }
    }

    public int getDataSetsSize() {
      return (this.dataSets == null) ? 0 : this.dataSets.size();
    }

    public java.util.Iterator<com.yihu.ehr.profile.TEhrDataSet> getDataSetsIterator() {
      return (this.dataSets == null) ? null : this.dataSets.iterator();
    }

    public void addToDataSets(com.yihu.ehr.profile.TEhrDataSet elem) {
      if (this.dataSets == null) {
        this.dataSets = new ArrayList<com.yihu.ehr.profile.TEhrDataSet>();
      }
      this.dataSets.add(elem);
    }

    public List<com.yihu.ehr.profile.TEhrDataSet> getDataSets() {
      return this.dataSets;
    }

    public loadDocumentByDataSet_args setDataSets(List<com.yihu.ehr.profile.TEhrDataSet> dataSets) {
      this.dataSets = dataSets;
      return this;
    }

    public void unsetDataSets() {
      this.dataSets = null;
    }

    /** Returns true if field dataSets is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSets() {
      return this.dataSets != null;
    }

    public void setDataSetsIsSet(boolean value) {
      if (!value) {
        this.dataSets = null;
      }
    }

    public boolean isOriginData() {
      return this.originData;
    }

    public loadDocumentByDataSet_args setOriginData(boolean originData) {
      this.originData = originData;
      setOriginDataIsSet(true);
      return this;
    }

    public void unsetOriginData() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORIGINDATA_ISSET_ID);
    }

    /** Returns true if field originData is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginData() {
      return EncodingUtils.testBit(__isset_bitfield, __ORIGINDATA_ISSET_ID);
    }

    public void setOriginDataIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORIGINDATA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CDA_VERSION:
        if (value == null) {
          unsetCdaVersion();
        } else {
          setCdaVersion((String)value);
        }
        break;

      case DATA_SETS:
        if (value == null) {
          unsetDataSets();
        } else {
          setDataSets((List<com.yihu.ehr.profile.TEhrDataSet>)value);
        }
        break;

      case ORIGIN_DATA:
        if (value == null) {
          unsetOriginData();
        } else {
          setOriginData((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CDA_VERSION:
        return getCdaVersion();

      case DATA_SETS:
        return getDataSets();

      case ORIGIN_DATA:
        return isOriginData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CDA_VERSION:
        return isSetCdaVersion();
      case DATA_SETS:
        return isSetDataSets();
      case ORIGIN_DATA:
        return isSetOriginData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadDocumentByDataSet_args)
        return this.equals((loadDocumentByDataSet_args)that);
      return false;
    }

    public boolean equals(loadDocumentByDataSet_args that) {
      if (that == null)
        return false;

      boolean this_present_cdaVersion = true && this.isSetCdaVersion();
      boolean that_present_cdaVersion = true && that.isSetCdaVersion();
      if (this_present_cdaVersion || that_present_cdaVersion) {
        if (!(this_present_cdaVersion && that_present_cdaVersion))
          return false;
        if (!this.cdaVersion.equals(that.cdaVersion))
          return false;
      }

      boolean this_present_dataSets = true && this.isSetDataSets();
      boolean that_present_dataSets = true && that.isSetDataSets();
      if (this_present_dataSets || that_present_dataSets) {
        if (!(this_present_dataSets && that_present_dataSets))
          return false;
        if (!this.dataSets.equals(that.dataSets))
          return false;
      }

      boolean this_present_originData = true;
      boolean that_present_originData = true;
      if (this_present_originData || that_present_originData) {
        if (!(this_present_originData && that_present_originData))
          return false;
        if (this.originData != that.originData)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cdaVersion = true && (isSetCdaVersion());
      list.add(present_cdaVersion);
      if (present_cdaVersion)
        list.add(cdaVersion);

      boolean present_dataSets = true && (isSetDataSets());
      list.add(present_dataSets);
      if (present_dataSets)
        list.add(dataSets);

      boolean present_originData = true;
      list.add(present_originData);
      if (present_originData)
        list.add(originData);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadDocumentByDataSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCdaVersion()).compareTo(other.isSetCdaVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdaVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdaVersion, other.cdaVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataSets()).compareTo(other.isSetDataSets());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSets()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSets, other.dataSets);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOriginData()).compareTo(other.isSetOriginData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originData, other.originData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadDocumentByDataSet_args(");
      boolean first = true;

      sb.append("cdaVersion:");
      if (this.cdaVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.cdaVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataSets:");
      if (this.dataSets == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSets);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("originData:");
      sb.append(this.originData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadDocumentByDataSet_argsStandardSchemeFactory implements SchemeFactory {
      public loadDocumentByDataSet_argsStandardScheme getScheme() {
        return new loadDocumentByDataSet_argsStandardScheme();
      }
    }

    private static class loadDocumentByDataSet_argsStandardScheme extends StandardScheme<loadDocumentByDataSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadDocumentByDataSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CDA_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cdaVersion = iprot.readString();
                struct.setCdaVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_SETS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.dataSets = new ArrayList<com.yihu.ehr.profile.TEhrDataSet>(_list8.size);
                  com.yihu.ehr.profile.TEhrDataSet _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.yihu.ehr.profile.TEhrDataSet();
                    _elem9.read(iprot);
                    struct.dataSets.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setDataSetsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORIGIN_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.originData = iprot.readBool();
                struct.setOriginDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadDocumentByDataSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cdaVersion != null) {
          oprot.writeFieldBegin(CDA_VERSION_FIELD_DESC);
          oprot.writeString(struct.cdaVersion);
          oprot.writeFieldEnd();
        }
        if (struct.dataSets != null) {
          oprot.writeFieldBegin(DATA_SETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dataSets.size()));
            for (com.yihu.ehr.profile.TEhrDataSet _iter11 : struct.dataSets)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ORIGIN_DATA_FIELD_DESC);
        oprot.writeBool(struct.originData);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadDocumentByDataSet_argsTupleSchemeFactory implements SchemeFactory {
      public loadDocumentByDataSet_argsTupleScheme getScheme() {
        return new loadDocumentByDataSet_argsTupleScheme();
      }
    }

    private static class loadDocumentByDataSet_argsTupleScheme extends TupleScheme<loadDocumentByDataSet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadDocumentByDataSet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCdaVersion()) {
          optionals.set(0);
        }
        if (struct.isSetDataSets()) {
          optionals.set(1);
        }
        if (struct.isSetOriginData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCdaVersion()) {
          oprot.writeString(struct.cdaVersion);
        }
        if (struct.isSetDataSets()) {
          {
            oprot.writeI32(struct.dataSets.size());
            for (com.yihu.ehr.profile.TEhrDataSet _iter12 : struct.dataSets)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetOriginData()) {
          oprot.writeBool(struct.originData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadDocumentByDataSet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cdaVersion = iprot.readString();
          struct.setCdaVersionIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.dataSets = new ArrayList<com.yihu.ehr.profile.TEhrDataSet>(_list13.size);
            com.yihu.ehr.profile.TEhrDataSet _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.yihu.ehr.profile.TEhrDataSet();
              _elem14.read(iprot);
              struct.dataSets.add(_elem14);
            }
          }
          struct.setDataSetsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.originData = iprot.readBool();
          struct.setOriginDataIsSet(true);
        }
      }
    }

  }

  public static class loadDocumentByDataSet_result implements org.apache.thrift.TBase<loadDocumentByDataSet_result, loadDocumentByDataSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadDocumentByDataSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadDocumentByDataSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadDocumentByDataSet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadDocumentByDataSet_resultTupleSchemeFactory());
    }

    public com.yihu.ehr.profile.TEhrProfile success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.profile.TEhrProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadDocumentByDataSet_result.class, metaDataMap);
    }

    public loadDocumentByDataSet_result() {
    }

    public loadDocumentByDataSet_result(
      com.yihu.ehr.profile.TEhrProfile success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadDocumentByDataSet_result(loadDocumentByDataSet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.yihu.ehr.profile.TEhrProfile(other.success);
      }
    }

    public loadDocumentByDataSet_result deepCopy() {
      return new loadDocumentByDataSet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.yihu.ehr.profile.TEhrProfile getSuccess() {
      return this.success;
    }

    public loadDocumentByDataSet_result setSuccess(com.yihu.ehr.profile.TEhrProfile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.yihu.ehr.profile.TEhrProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadDocumentByDataSet_result)
        return this.equals((loadDocumentByDataSet_result)that);
      return false;
    }

    public boolean equals(loadDocumentByDataSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadDocumentByDataSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadDocumentByDataSet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadDocumentByDataSet_resultStandardSchemeFactory implements SchemeFactory {
      public loadDocumentByDataSet_resultStandardScheme getScheme() {
        return new loadDocumentByDataSet_resultStandardScheme();
      }
    }

    private static class loadDocumentByDataSet_resultStandardScheme extends StandardScheme<loadDocumentByDataSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadDocumentByDataSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.yihu.ehr.profile.TEhrProfile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadDocumentByDataSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadDocumentByDataSet_resultTupleSchemeFactory implements SchemeFactory {
      public loadDocumentByDataSet_resultTupleScheme getScheme() {
        return new loadDocumentByDataSet_resultTupleScheme();
      }
    }

    private static class loadDocumentByDataSet_resultTupleScheme extends TupleScheme<loadDocumentByDataSet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadDocumentByDataSet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadDocumentByDataSet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.yihu.ehr.profile.TEhrProfile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
