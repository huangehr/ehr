/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yihu.ehr.adaption;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-18")
public class TAdaptionDispatchService {

  /**
   * 标准适配分发服务。
   * 
   */
  public interface Iface {

    /**
     * 获取适配方案映射信息
     * 
     * 
     * @param userId
     * @param verionIde
     * @param orgCode
     */
    public com.yihu.ehr.adaption.TAdaptationScheme getScheme(String userId, String verionIde, String orgCode) throws org.apache.thrift.TException;

    /**
     * 获取采集标准及适配方案信息
     * 
     * 
     * @param userId
     * @param verionIde
     * @param orgCode
     */
    public List<com.yihu.ehr.adaption.TAdaptationScheme> getSchemes(String userId, String verionIde, String orgCode) throws org.apache.thrift.TException;

    /**
     * 根据机构编码获取最新映射版本号
     * 
     * 
     * @param orgCode
     */
    public com.yihu.ehr.adaption.TAdaptationScheme getOrgLastestAdaption(String orgCode) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getScheme(String userId, String verionIde, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSchemes(String userId, String verionIde, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrgLastestAdaption(String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.yihu.ehr.adaption.TAdaptationScheme getScheme(String userId, String verionIde, String orgCode) throws org.apache.thrift.TException
    {
      send_getScheme(userId, verionIde, orgCode);
      return recv_getScheme();
    }

    public void send_getScheme(String userId, String verionIde, String orgCode) throws org.apache.thrift.TException
    {
      getScheme_args args = new getScheme_args();
      args.setUserId(userId);
      args.setVerionIde(verionIde);
      args.setOrgCode(orgCode);
      sendBase("getScheme", args);
    }

    public com.yihu.ehr.adaption.TAdaptationScheme recv_getScheme() throws org.apache.thrift.TException
    {
      getScheme_result result = new getScheme_result();
      receiveBase(result, "getScheme");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getScheme failed: unknown result");
    }

    public List<com.yihu.ehr.adaption.TAdaptationScheme> getSchemes(String userId, String verionIde, String orgCode) throws org.apache.thrift.TException
    {
      send_getSchemes(userId, verionIde, orgCode);
      return recv_getSchemes();
    }

    public void send_getSchemes(String userId, String verionIde, String orgCode) throws org.apache.thrift.TException
    {
      getSchemes_args args = new getSchemes_args();
      args.setUserId(userId);
      args.setVerionIde(verionIde);
      args.setOrgCode(orgCode);
      sendBase("getSchemes", args);
    }

    public List<com.yihu.ehr.adaption.TAdaptationScheme> recv_getSchemes() throws org.apache.thrift.TException
    {
      getSchemes_result result = new getSchemes_result();
      receiveBase(result, "getSchemes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSchemes failed: unknown result");
    }

    public com.yihu.ehr.adaption.TAdaptationScheme getOrgLastestAdaption(String orgCode) throws org.apache.thrift.TException
    {
      send_getOrgLastestAdaption(orgCode);
      return recv_getOrgLastestAdaption();
    }

    public void send_getOrgLastestAdaption(String orgCode) throws org.apache.thrift.TException
    {
      getOrgLastestAdaption_args args = new getOrgLastestAdaption_args();
      args.setOrgCode(orgCode);
      sendBase("getOrgLastestAdaption", args);
    }

    public com.yihu.ehr.adaption.TAdaptationScheme recv_getOrgLastestAdaption() throws org.apache.thrift.TException
    {
      getOrgLastestAdaption_result result = new getOrgLastestAdaption_result();
      receiveBase(result, "getOrgLastestAdaption");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrgLastestAdaption failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getScheme(String userId, String verionIde, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getScheme_call method_call = new getScheme_call(userId, verionIde, orgCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getScheme_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private String verionIde;
      private String orgCode;
      public getScheme_call(String userId, String verionIde, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.verionIde = verionIde;
        this.orgCode = orgCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getScheme", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getScheme_args args = new getScheme_args();
        args.setUserId(userId);
        args.setVerionIde(verionIde);
        args.setOrgCode(orgCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.yihu.ehr.adaption.TAdaptationScheme getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getScheme();
      }
    }

    public void getSchemes(String userId, String verionIde, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSchemes_call method_call = new getSchemes_call(userId, verionIde, orgCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSchemes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private String verionIde;
      private String orgCode;
      public getSchemes_call(String userId, String verionIde, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.verionIde = verionIde;
        this.orgCode = orgCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSchemes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSchemes_args args = new getSchemes_args();
        args.setUserId(userId);
        args.setVerionIde(verionIde);
        args.setOrgCode(orgCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.yihu.ehr.adaption.TAdaptationScheme> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSchemes();
      }
    }

    public void getOrgLastestAdaption(String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrgLastestAdaption_call method_call = new getOrgLastestAdaption_call(orgCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrgLastestAdaption_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orgCode;
      public getOrgLastestAdaption_call(String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgCode = orgCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrgLastestAdaption", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrgLastestAdaption_args args = new getOrgLastestAdaption_args();
        args.setOrgCode(orgCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.yihu.ehr.adaption.TAdaptationScheme getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrgLastestAdaption();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getScheme", new getScheme());
      processMap.put("getSchemes", new getSchemes());
      processMap.put("getOrgLastestAdaption", new getOrgLastestAdaption());
      return processMap;
    }

    public static class getScheme<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getScheme_args> {
      public getScheme() {
        super("getScheme");
      }

      public getScheme_args getEmptyArgsInstance() {
        return new getScheme_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getScheme_result getResult(I iface, getScheme_args args) throws org.apache.thrift.TException {
        getScheme_result result = new getScheme_result();
        result.success = iface.getScheme(args.userId, args.verionIde, args.orgCode);
        return result;
      }
    }

    public static class getSchemes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSchemes_args> {
      public getSchemes() {
        super("getSchemes");
      }

      public getSchemes_args getEmptyArgsInstance() {
        return new getSchemes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSchemes_result getResult(I iface, getSchemes_args args) throws org.apache.thrift.TException {
        getSchemes_result result = new getSchemes_result();
        result.success = iface.getSchemes(args.userId, args.verionIde, args.orgCode);
        return result;
      }
    }

    public static class getOrgLastestAdaption<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrgLastestAdaption_args> {
      public getOrgLastestAdaption() {
        super("getOrgLastestAdaption");
      }

      public getOrgLastestAdaption_args getEmptyArgsInstance() {
        return new getOrgLastestAdaption_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrgLastestAdaption_result getResult(I iface, getOrgLastestAdaption_args args) throws org.apache.thrift.TException {
        getOrgLastestAdaption_result result = new getOrgLastestAdaption_result();
        result.success = iface.getOrgLastestAdaption(args.orgCode);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getScheme", new getScheme());
      processMap.put("getSchemes", new getSchemes());
      processMap.put("getOrgLastestAdaption", new getOrgLastestAdaption());
      return processMap;
    }

    public static class getScheme<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getScheme_args, com.yihu.ehr.adaption.TAdaptationScheme> {
      public getScheme() {
        super("getScheme");
      }

      public getScheme_args getEmptyArgsInstance() {
        return new getScheme_args();
      }

      public AsyncMethodCallback<com.yihu.ehr.adaption.TAdaptationScheme> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.yihu.ehr.adaption.TAdaptationScheme>() { 
          public void onComplete(com.yihu.ehr.adaption.TAdaptationScheme o) {
            getScheme_result result = new getScheme_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getScheme_result result = new getScheme_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getScheme_args args, org.apache.thrift.async.AsyncMethodCallback<com.yihu.ehr.adaption.TAdaptationScheme> resultHandler) throws TException {
        iface.getScheme(args.userId, args.verionIde, args.orgCode,resultHandler);
      }
    }

    public static class getSchemes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSchemes_args, List<com.yihu.ehr.adaption.TAdaptationScheme>> {
      public getSchemes() {
        super("getSchemes");
      }

      public getSchemes_args getEmptyArgsInstance() {
        return new getSchemes_args();
      }

      public AsyncMethodCallback<List<com.yihu.ehr.adaption.TAdaptationScheme>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.yihu.ehr.adaption.TAdaptationScheme>>() { 
          public void onComplete(List<com.yihu.ehr.adaption.TAdaptationScheme> o) {
            getSchemes_result result = new getSchemes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSchemes_result result = new getSchemes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSchemes_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.yihu.ehr.adaption.TAdaptationScheme>> resultHandler) throws TException {
        iface.getSchemes(args.userId, args.verionIde, args.orgCode,resultHandler);
      }
    }

    public static class getOrgLastestAdaption<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrgLastestAdaption_args, com.yihu.ehr.adaption.TAdaptationScheme> {
      public getOrgLastestAdaption() {
        super("getOrgLastestAdaption");
      }

      public getOrgLastestAdaption_args getEmptyArgsInstance() {
        return new getOrgLastestAdaption_args();
      }

      public AsyncMethodCallback<com.yihu.ehr.adaption.TAdaptationScheme> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.yihu.ehr.adaption.TAdaptationScheme>() { 
          public void onComplete(com.yihu.ehr.adaption.TAdaptationScheme o) {
            getOrgLastestAdaption_result result = new getOrgLastestAdaption_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrgLastestAdaption_result result = new getOrgLastestAdaption_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrgLastestAdaption_args args, org.apache.thrift.async.AsyncMethodCallback<com.yihu.ehr.adaption.TAdaptationScheme> resultHandler) throws TException {
        iface.getOrgLastestAdaption(args.orgCode,resultHandler);
      }
    }

  }

  public static class getScheme_args implements org.apache.thrift.TBase<getScheme_args, getScheme_args._Fields>, java.io.Serializable, Cloneable, Comparable<getScheme_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getScheme_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERION_IDE_FIELD_DESC = new org.apache.thrift.protocol.TField("verionIde", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getScheme_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getScheme_argsTupleSchemeFactory());
    }

    public String userId; // required
    public String verionIde; // required
    public String orgCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      VERION_IDE((short)2, "verionIde"),
      ORG_CODE((short)3, "orgCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // VERION_IDE
            return VERION_IDE;
          case 3: // ORG_CODE
            return ORG_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERION_IDE, new org.apache.thrift.meta_data.FieldMetaData("verionIde", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getScheme_args.class, metaDataMap);
    }

    public getScheme_args() {
    }

    public getScheme_args(
      String userId,
      String verionIde,
      String orgCode)
    {
      this();
      this.userId = userId;
      this.verionIde = verionIde;
      this.orgCode = orgCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getScheme_args(getScheme_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetVerionIde()) {
        this.verionIde = other.verionIde;
      }
      if (other.isSetOrgCode()) {
        this.orgCode = other.orgCode;
      }
    }

    public getScheme_args deepCopy() {
      return new getScheme_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.verionIde = null;
      this.orgCode = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getScheme_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getVerionIde() {
      return this.verionIde;
    }

    public getScheme_args setVerionIde(String verionIde) {
      this.verionIde = verionIde;
      return this;
    }

    public void unsetVerionIde() {
      this.verionIde = null;
    }

    /** Returns true if field verionIde is set (has been assigned a value) and false otherwise */
    public boolean isSetVerionIde() {
      return this.verionIde != null;
    }

    public void setVerionIdeIsSet(boolean value) {
      if (!value) {
        this.verionIde = null;
      }
    }

    public String getOrgCode() {
      return this.orgCode;
    }

    public getScheme_args setOrgCode(String orgCode) {
      this.orgCode = orgCode;
      return this;
    }

    public void unsetOrgCode() {
      this.orgCode = null;
    }

    /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgCode() {
      return this.orgCode != null;
    }

    public void setOrgCodeIsSet(boolean value) {
      if (!value) {
        this.orgCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case VERION_IDE:
        if (value == null) {
          unsetVerionIde();
        } else {
          setVerionIde((String)value);
        }
        break;

      case ORG_CODE:
        if (value == null) {
          unsetOrgCode();
        } else {
          setOrgCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case VERION_IDE:
        return getVerionIde();

      case ORG_CODE:
        return getOrgCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case VERION_IDE:
        return isSetVerionIde();
      case ORG_CODE:
        return isSetOrgCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getScheme_args)
        return this.equals((getScheme_args)that);
      return false;
    }

    public boolean equals(getScheme_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_verionIde = true && this.isSetVerionIde();
      boolean that_present_verionIde = true && that.isSetVerionIde();
      if (this_present_verionIde || that_present_verionIde) {
        if (!(this_present_verionIde && that_present_verionIde))
          return false;
        if (!this.verionIde.equals(that.verionIde))
          return false;
      }

      boolean this_present_orgCode = true && this.isSetOrgCode();
      boolean that_present_orgCode = true && that.isSetOrgCode();
      if (this_present_orgCode || that_present_orgCode) {
        if (!(this_present_orgCode && that_present_orgCode))
          return false;
        if (!this.orgCode.equals(that.orgCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_verionIde = true && (isSetVerionIde());
      list.add(present_verionIde);
      if (present_verionIde)
        list.add(verionIde);

      boolean present_orgCode = true && (isSetOrgCode());
      list.add(present_orgCode);
      if (present_orgCode)
        list.add(orgCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getScheme_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVerionIde()).compareTo(other.isSetVerionIde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerionIde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verionIde, other.verionIde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getScheme_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verionIde:");
      if (this.verionIde == null) {
        sb.append("null");
      } else {
        sb.append(this.verionIde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getScheme_argsStandardSchemeFactory implements SchemeFactory {
      public getScheme_argsStandardScheme getScheme() {
        return new getScheme_argsStandardScheme();
      }
    }

    private static class getScheme_argsStandardScheme extends StandardScheme<getScheme_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getScheme_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERION_IDE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.verionIde = iprot.readString();
                struct.setVerionIdeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORG_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgCode = iprot.readString();
                struct.setOrgCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getScheme_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.verionIde != null) {
          oprot.writeFieldBegin(VERION_IDE_FIELD_DESC);
          oprot.writeString(struct.verionIde);
          oprot.writeFieldEnd();
        }
        if (struct.orgCode != null) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getScheme_argsTupleSchemeFactory implements SchemeFactory {
      public getScheme_argsTupleScheme getScheme() {
        return new getScheme_argsTupleScheme();
      }
    }

    private static class getScheme_argsTupleScheme extends TupleScheme<getScheme_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getScheme_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetVerionIde()) {
          optionals.set(1);
        }
        if (struct.isSetOrgCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetVerionIde()) {
          oprot.writeString(struct.verionIde);
        }
        if (struct.isSetOrgCode()) {
          oprot.writeString(struct.orgCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getScheme_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.verionIde = iprot.readString();
          struct.setVerionIdeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.orgCode = iprot.readString();
          struct.setOrgCodeIsSet(true);
        }
      }
    }

  }

  public static class getScheme_result implements org.apache.thrift.TBase<getScheme_result, getScheme_result._Fields>, java.io.Serializable, Cloneable, Comparable<getScheme_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getScheme_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getScheme_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getScheme_resultTupleSchemeFactory());
    }

    public com.yihu.ehr.adaption.TAdaptationScheme success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.adaption.TAdaptationScheme.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getScheme_result.class, metaDataMap);
    }

    public getScheme_result() {
    }

    public getScheme_result(
      com.yihu.ehr.adaption.TAdaptationScheme success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getScheme_result(getScheme_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.yihu.ehr.adaption.TAdaptationScheme(other.success);
      }
    }

    public getScheme_result deepCopy() {
      return new getScheme_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.yihu.ehr.adaption.TAdaptationScheme getSuccess() {
      return this.success;
    }

    public getScheme_result setSuccess(com.yihu.ehr.adaption.TAdaptationScheme success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.yihu.ehr.adaption.TAdaptationScheme)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getScheme_result)
        return this.equals((getScheme_result)that);
      return false;
    }

    public boolean equals(getScheme_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getScheme_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getScheme_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getScheme_resultStandardSchemeFactory implements SchemeFactory {
      public getScheme_resultStandardScheme getScheme() {
        return new getScheme_resultStandardScheme();
      }
    }

    private static class getScheme_resultStandardScheme extends StandardScheme<getScheme_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getScheme_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.yihu.ehr.adaption.TAdaptationScheme();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getScheme_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getScheme_resultTupleSchemeFactory implements SchemeFactory {
      public getScheme_resultTupleScheme getScheme() {
        return new getScheme_resultTupleScheme();
      }
    }

    private static class getScheme_resultTupleScheme extends TupleScheme<getScheme_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getScheme_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getScheme_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.yihu.ehr.adaption.TAdaptationScheme();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSchemes_args implements org.apache.thrift.TBase<getSchemes_args, getSchemes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSchemes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSchemes_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERION_IDE_FIELD_DESC = new org.apache.thrift.protocol.TField("verionIde", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSchemes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSchemes_argsTupleSchemeFactory());
    }

    public String userId; // required
    public String verionIde; // required
    public String orgCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      VERION_IDE((short)2, "verionIde"),
      ORG_CODE((short)3, "orgCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // VERION_IDE
            return VERION_IDE;
          case 3: // ORG_CODE
            return ORG_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERION_IDE, new org.apache.thrift.meta_data.FieldMetaData("verionIde", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSchemes_args.class, metaDataMap);
    }

    public getSchemes_args() {
    }

    public getSchemes_args(
      String userId,
      String verionIde,
      String orgCode)
    {
      this();
      this.userId = userId;
      this.verionIde = verionIde;
      this.orgCode = orgCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSchemes_args(getSchemes_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetVerionIde()) {
        this.verionIde = other.verionIde;
      }
      if (other.isSetOrgCode()) {
        this.orgCode = other.orgCode;
      }
    }

    public getSchemes_args deepCopy() {
      return new getSchemes_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.verionIde = null;
      this.orgCode = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getSchemes_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getVerionIde() {
      return this.verionIde;
    }

    public getSchemes_args setVerionIde(String verionIde) {
      this.verionIde = verionIde;
      return this;
    }

    public void unsetVerionIde() {
      this.verionIde = null;
    }

    /** Returns true if field verionIde is set (has been assigned a value) and false otherwise */
    public boolean isSetVerionIde() {
      return this.verionIde != null;
    }

    public void setVerionIdeIsSet(boolean value) {
      if (!value) {
        this.verionIde = null;
      }
    }

    public String getOrgCode() {
      return this.orgCode;
    }

    public getSchemes_args setOrgCode(String orgCode) {
      this.orgCode = orgCode;
      return this;
    }

    public void unsetOrgCode() {
      this.orgCode = null;
    }

    /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgCode() {
      return this.orgCode != null;
    }

    public void setOrgCodeIsSet(boolean value) {
      if (!value) {
        this.orgCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case VERION_IDE:
        if (value == null) {
          unsetVerionIde();
        } else {
          setVerionIde((String)value);
        }
        break;

      case ORG_CODE:
        if (value == null) {
          unsetOrgCode();
        } else {
          setOrgCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case VERION_IDE:
        return getVerionIde();

      case ORG_CODE:
        return getOrgCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case VERION_IDE:
        return isSetVerionIde();
      case ORG_CODE:
        return isSetOrgCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchemes_args)
        return this.equals((getSchemes_args)that);
      return false;
    }

    public boolean equals(getSchemes_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_verionIde = true && this.isSetVerionIde();
      boolean that_present_verionIde = true && that.isSetVerionIde();
      if (this_present_verionIde || that_present_verionIde) {
        if (!(this_present_verionIde && that_present_verionIde))
          return false;
        if (!this.verionIde.equals(that.verionIde))
          return false;
      }

      boolean this_present_orgCode = true && this.isSetOrgCode();
      boolean that_present_orgCode = true && that.isSetOrgCode();
      if (this_present_orgCode || that_present_orgCode) {
        if (!(this_present_orgCode && that_present_orgCode))
          return false;
        if (!this.orgCode.equals(that.orgCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_verionIde = true && (isSetVerionIde());
      list.add(present_verionIde);
      if (present_verionIde)
        list.add(verionIde);

      boolean present_orgCode = true && (isSetOrgCode());
      list.add(present_orgCode);
      if (present_orgCode)
        list.add(orgCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSchemes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVerionIde()).compareTo(other.isSetVerionIde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerionIde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verionIde, other.verionIde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchemes_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verionIde:");
      if (this.verionIde == null) {
        sb.append("null");
      } else {
        sb.append(this.verionIde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchemes_argsStandardSchemeFactory implements SchemeFactory {
      public getSchemes_argsStandardScheme getScheme() {
        return new getSchemes_argsStandardScheme();
      }
    }

    private static class getSchemes_argsStandardScheme extends StandardScheme<getSchemes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSchemes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERION_IDE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.verionIde = iprot.readString();
                struct.setVerionIdeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORG_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgCode = iprot.readString();
                struct.setOrgCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSchemes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.verionIde != null) {
          oprot.writeFieldBegin(VERION_IDE_FIELD_DESC);
          oprot.writeString(struct.verionIde);
          oprot.writeFieldEnd();
        }
        if (struct.orgCode != null) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchemes_argsTupleSchemeFactory implements SchemeFactory {
      public getSchemes_argsTupleScheme getScheme() {
        return new getSchemes_argsTupleScheme();
      }
    }

    private static class getSchemes_argsTupleScheme extends TupleScheme<getSchemes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSchemes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetVerionIde()) {
          optionals.set(1);
        }
        if (struct.isSetOrgCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetVerionIde()) {
          oprot.writeString(struct.verionIde);
        }
        if (struct.isSetOrgCode()) {
          oprot.writeString(struct.orgCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSchemes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.verionIde = iprot.readString();
          struct.setVerionIdeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.orgCode = iprot.readString();
          struct.setOrgCodeIsSet(true);
        }
      }
    }

  }

  public static class getSchemes_result implements org.apache.thrift.TBase<getSchemes_result, getSchemes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSchemes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSchemes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSchemes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSchemes_resultTupleSchemeFactory());
    }

    public List<com.yihu.ehr.adaption.TAdaptationScheme> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.adaption.TAdaptationScheme.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSchemes_result.class, metaDataMap);
    }

    public getSchemes_result() {
    }

    public getSchemes_result(
      List<com.yihu.ehr.adaption.TAdaptationScheme> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSchemes_result(getSchemes_result other) {
      if (other.isSetSuccess()) {
        List<com.yihu.ehr.adaption.TAdaptationScheme> __this__success = new ArrayList<com.yihu.ehr.adaption.TAdaptationScheme>(other.success.size());
        for (com.yihu.ehr.adaption.TAdaptationScheme other_element : other.success) {
          __this__success.add(new com.yihu.ehr.adaption.TAdaptationScheme(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSchemes_result deepCopy() {
      return new getSchemes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.yihu.ehr.adaption.TAdaptationScheme> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.yihu.ehr.adaption.TAdaptationScheme elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.yihu.ehr.adaption.TAdaptationScheme>();
      }
      this.success.add(elem);
    }

    public List<com.yihu.ehr.adaption.TAdaptationScheme> getSuccess() {
      return this.success;
    }

    public getSchemes_result setSuccess(List<com.yihu.ehr.adaption.TAdaptationScheme> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.yihu.ehr.adaption.TAdaptationScheme>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchemes_result)
        return this.equals((getSchemes_result)that);
      return false;
    }

    public boolean equals(getSchemes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSchemes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchemes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchemes_resultStandardSchemeFactory implements SchemeFactory {
      public getSchemes_resultStandardScheme getScheme() {
        return new getSchemes_resultStandardScheme();
      }
    }

    private static class getSchemes_resultStandardScheme extends StandardScheme<getSchemes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSchemes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.yihu.ehr.adaption.TAdaptationScheme>(_list0.size);
                  com.yihu.ehr.adaption.TAdaptationScheme _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.yihu.ehr.adaption.TAdaptationScheme();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSchemes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.yihu.ehr.adaption.TAdaptationScheme _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchemes_resultTupleSchemeFactory implements SchemeFactory {
      public getSchemes_resultTupleScheme getScheme() {
        return new getSchemes_resultTupleScheme();
      }
    }

    private static class getSchemes_resultTupleScheme extends TupleScheme<getSchemes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSchemes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.yihu.ehr.adaption.TAdaptationScheme _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSchemes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.yihu.ehr.adaption.TAdaptationScheme>(_list5.size);
            com.yihu.ehr.adaption.TAdaptationScheme _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.yihu.ehr.adaption.TAdaptationScheme();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrgLastestAdaption_args implements org.apache.thrift.TBase<getOrgLastestAdaption_args, getOrgLastestAdaption_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgLastestAdaption_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgLastestAdaption_args");

    private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgLastestAdaption_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgLastestAdaption_argsTupleSchemeFactory());
    }

    public String orgCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_CODE((short)1, "orgCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_CODE
            return ORG_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgLastestAdaption_args.class, metaDataMap);
    }

    public getOrgLastestAdaption_args() {
    }

    public getOrgLastestAdaption_args(
      String orgCode)
    {
      this();
      this.orgCode = orgCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgLastestAdaption_args(getOrgLastestAdaption_args other) {
      if (other.isSetOrgCode()) {
        this.orgCode = other.orgCode;
      }
    }

    public getOrgLastestAdaption_args deepCopy() {
      return new getOrgLastestAdaption_args(this);
    }

    @Override
    public void clear() {
      this.orgCode = null;
    }

    public String getOrgCode() {
      return this.orgCode;
    }

    public getOrgLastestAdaption_args setOrgCode(String orgCode) {
      this.orgCode = orgCode;
      return this;
    }

    public void unsetOrgCode() {
      this.orgCode = null;
    }

    /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgCode() {
      return this.orgCode != null;
    }

    public void setOrgCodeIsSet(boolean value) {
      if (!value) {
        this.orgCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_CODE:
        if (value == null) {
          unsetOrgCode();
        } else {
          setOrgCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_CODE:
        return getOrgCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_CODE:
        return isSetOrgCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgLastestAdaption_args)
        return this.equals((getOrgLastestAdaption_args)that);
      return false;
    }

    public boolean equals(getOrgLastestAdaption_args that) {
      if (that == null)
        return false;

      boolean this_present_orgCode = true && this.isSetOrgCode();
      boolean that_present_orgCode = true && that.isSetOrgCode();
      if (this_present_orgCode || that_present_orgCode) {
        if (!(this_present_orgCode && that_present_orgCode))
          return false;
        if (!this.orgCode.equals(that.orgCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orgCode = true && (isSetOrgCode());
      list.add(present_orgCode);
      if (present_orgCode)
        list.add(orgCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgLastestAdaption_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgLastestAdaption_args(");
      boolean first = true;

      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgLastestAdaption_argsStandardSchemeFactory implements SchemeFactory {
      public getOrgLastestAdaption_argsStandardScheme getScheme() {
        return new getOrgLastestAdaption_argsStandardScheme();
      }
    }

    private static class getOrgLastestAdaption_argsStandardScheme extends StandardScheme<getOrgLastestAdaption_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgLastestAdaption_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgCode = iprot.readString();
                struct.setOrgCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgLastestAdaption_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orgCode != null) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgLastestAdaption_argsTupleSchemeFactory implements SchemeFactory {
      public getOrgLastestAdaption_argsTupleScheme getScheme() {
        return new getOrgLastestAdaption_argsTupleScheme();
      }
    }

    private static class getOrgLastestAdaption_argsTupleScheme extends TupleScheme<getOrgLastestAdaption_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgLastestAdaption_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrgCode()) {
          oprot.writeString(struct.orgCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgLastestAdaption_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orgCode = iprot.readString();
          struct.setOrgCodeIsSet(true);
        }
      }
    }

  }

  public static class getOrgLastestAdaption_result implements org.apache.thrift.TBase<getOrgLastestAdaption_result, getOrgLastestAdaption_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgLastestAdaption_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgLastestAdaption_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgLastestAdaption_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgLastestAdaption_resultTupleSchemeFactory());
    }

    public com.yihu.ehr.adaption.TAdaptationScheme success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.yihu.ehr.adaption.TAdaptationScheme.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgLastestAdaption_result.class, metaDataMap);
    }

    public getOrgLastestAdaption_result() {
    }

    public getOrgLastestAdaption_result(
      com.yihu.ehr.adaption.TAdaptationScheme success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgLastestAdaption_result(getOrgLastestAdaption_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.yihu.ehr.adaption.TAdaptationScheme(other.success);
      }
    }

    public getOrgLastestAdaption_result deepCopy() {
      return new getOrgLastestAdaption_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.yihu.ehr.adaption.TAdaptationScheme getSuccess() {
      return this.success;
    }

    public getOrgLastestAdaption_result setSuccess(com.yihu.ehr.adaption.TAdaptationScheme success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.yihu.ehr.adaption.TAdaptationScheme)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgLastestAdaption_result)
        return this.equals((getOrgLastestAdaption_result)that);
      return false;
    }

    public boolean equals(getOrgLastestAdaption_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgLastestAdaption_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgLastestAdaption_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgLastestAdaption_resultStandardSchemeFactory implements SchemeFactory {
      public getOrgLastestAdaption_resultStandardScheme getScheme() {
        return new getOrgLastestAdaption_resultStandardScheme();
      }
    }

    private static class getOrgLastestAdaption_resultStandardScheme extends StandardScheme<getOrgLastestAdaption_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgLastestAdaption_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.yihu.ehr.adaption.TAdaptationScheme();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgLastestAdaption_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgLastestAdaption_resultTupleSchemeFactory implements SchemeFactory {
      public getOrgLastestAdaption_resultTupleScheme getScheme() {
        return new getOrgLastestAdaption_resultTupleScheme();
      }
    }

    private static class getOrgLastestAdaption_resultTupleScheme extends TupleScheme<getOrgLastestAdaption_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgLastestAdaption_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgLastestAdaption_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.yihu.ehr.adaption.TAdaptationScheme();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
